
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function Boolean TouchScreenLookVertical();
external inner function string 60 UserDefined(string,string);
remote inner function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc,var Integer);
external inner function Boolean TouchScreenLook();
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner function Boolean UseTaxTemplatesforTaxCalc();
external inner function Boolean HasCharts();
external inner function Boolean HasIntegratedNL();

// Language functions LIT
external inner function Boolean DisplayLoginKeyPad_LIT();
external inner function string 255 VATZoneEditFieldLabelLIT(Integer);
external inner function real VATZoneButtonsLabelsLIT(real,real,real,real);
external inner procedure LoginButtons2_LIT(Real,Real);
external inner procedure FORMDEF_LIT();
external inner function string 255 DemoMsgWClassTitle_LIT(Boolean,Boolean);
external inner procedure TBEClassDef_LIT();
external inner function string 255 VATZoneNameLIT();
external inner procedure TSERW_LIT();
external inner procedure TSERWNT_LIT();
external inner procedure TSERWTouch_LIT();
external inner procedure TSERWTEST_LIT();
external inner procedure INVFORM_LIT(Boolean);
external inner procedure DisplayRecordDetails_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_LIT(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_LIT();
external inner function string 255 ResMonWClassWindowTitle_LIT();
external inner function string 255 RTMonWClassWindowTitle_LIT();
external inner procedure SetupNightAuditWindowControls_LIT(Boolean);
external inner procedure CURClassDefinitionLIT();
external inner function real DrawPaymentModesButtons_IV_LIT(real);
external inner function real FunctionButtons_LIT(string);
external inner procedure CreditCardWindowHeader_LIT(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_LIT(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_LIT(Real);
external inner procedure CreditCardWindowDeliveryDetail_LIT(Real);
external inner function real DrawPaymentModesButtons_LIT();
external inner procedure DrawBarMenuTiles_LIT(string);
external inner procedure DrawRestPMOtherPay_LIT();
external inner procedure DisplayRecordDetailsRA_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_LIT(var integer,var integer);
external inner procedure OKCancel_LIT();
external inner procedure DefineElearningURLCacheLClass_LIT();
external inner procedure DefineElearningURLCacheDClass_LIT();
external inner function real TravelLogDeductions_LIT(real,real);
external inner procedure LoginButtons_LIT(Real);
external inner procedure FORMDEF2_LIT();
external inner procedure FORMDEF3_LIT();
external inner procedure ARS2RClass_LIT();
external inner procedure ALLVATRClass_LIT();

external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasApprovals();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasBase2();
external inner function Boolean HasCategories();
external inner function Boolean HasContactClassification();
external inner function Boolean HasDownpayments();
external inner function Boolean HasDepartments();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasExtTax();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasLanguages();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasObjects();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasOrderClasses();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPositions();
external inner function Boolean HasPrepayments();
external inner function Boolean HasProjects();
external inner function Boolean HasQualityControl();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean hasSimAccruals();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasEMail();
external inner function Boolean HasModAT2();
external inner function Boolean HasModCL();
external inner function Boolean HasModCRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModNL();
external inner function Boolean HasModPO();
external inner function Boolean HasModPL();
external inner function Boolean HasModProd();
external inner function Boolean HasModRent();
external inner function Boolean HasModSO();
external inner function Boolean HasModSVO();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();

SetLangMode(LangLithuanian,"LIT",2);//##ii

window IVDClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer rn;

  WindowBegin("Faktūra",IVDClass,CGview,-);
  Sizeable(-1,-1,0,0);
  UseView(IVVc);
//if (HasTouchScreenLook==false) then begin  //no more TS interface in SL , Karl order
if (true) then begin
  ActiveFieldOnNew("CustCode");
  SetWRect(20,80,750,460);
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Pirkėjas",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Pavadinimas",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
    if (HasLocalization("FIN")) then begin
      EditField(h,vm=(v+=20),180,"Mokėjimo nuor.",ViewOnly,CalcFinRef,false,0);
    end else begin
  EditField(h,vm=(v+=20),135,"Oficialus Nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
    end;
  end else begin
    v = v + 20;
    vm = v;
  end;
  CheckBox(h4=-80,v,0,"OK",OKFlag);
  TileButton(1,"Terminai");
  TileButton(2,"Prekės");
  TileButton(3,"Valiuta");
  TileButton(4,"Siuntimas");
  TileButton(5,"Ident.");
  TileButton(6,"Kainodara");
  TileButton(7,"Fakt. adresas");
  TileButton(8,"Siunt. adresas");
  Tile(1,110,false,"1",InvDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Faktūros data",Normal,InvDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Mok. sąl.",Normal,PayDeal,false,PDSClass);//PDMSClass);
  EditField(h1,v+=vs,82,"Apmokėti iki",Normal,PayDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Oper. data",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Pasl. prist. data",Normal,ServiceDelDate,false,PasteCurDate);
  EditField(h2,v=vm,135,"Mūsų nuoroda",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Perspėjimas",Normal,ClientContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Objektai",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Nuoroda",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"Pirk. Užsk. Nr.",Normal,CustOrdNr,false,0);
  EditField(h3,v=vm,80,"Pardavėjas",Normal,SalesMan,false,UserSClass);
  if (StandardHansa) then begin
    EditField(h3,v+=vs,80,"Patalpa",Normal,Location,false,LocationSClass);
  end else begin
  EditField(h3,v+=vs,80,"Projektas",Normal,PRCode,false,0);
  end;
  EditField(h3,v+=vs,80,"Kredito priežastis",Normal,Reason,false,StandProblemsSClass);
  if (HasLocalization("MEX")) then begin
    EditField(h3,v+=vs,80,"Mokėjimo būsena",Normal,PMCode,false,PMSClass);
  end;
  if (HasLocalization("BRA")) then begin
    EditField(h3,v+=vs,80,"Faktūros tipas",Normal,BrazilEInvType,false,BrazilEInvTypeSClass);
  end;
  if (HasLocalization("BOL,BRA,HRV,MEX")) then begin
    EditField(h3,v+=vs,130,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
  end;
  if (HasLocalization("MEX")) then begin
    EditField(h3,v+=vs,80,"No. Pay. Acc.",Normal,PayAccNo,false,0);
  end;
  if (HasLocalization("RUS")) then begin
    EditField(h3,v+=vs,-20,"Čekio info.",Normal,ReceiptInfo,false,0);
  end;
  CheckBox(-80,v=6,0,"Abejotina",DisputedFlag);
  if (StandardHansa) then begin
    CheckBox(h4,v+=16,0,"Atnaujinti sandėlį",UpdStockFlag);
  end;
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
//  CheckBox(20,-20,0,"OK",OKFlag);
  if (CompileType!=ctiPhone) then begin
  EditField(55,-41,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  if (UseTaxTemplatesforTaxCalc==false) then begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(160,-41,70,"BP %",Normal,GPProc,true,0);
      EditField(160,-21,70,"Viso BP",ViewOnly,TotGP,true,0);
    end;
    if (HasLocalization("GBR,LTU,POL")) then begin
      EditField(310,-41,50,"Reversinis PVM",ViewOnly,RvrsVAT,true,0);
      EditField(290,-21,70,"Ext. mok",ViewOnly,TAX1Sum,true,0);
    end else begin
      EditField(290,-41,70,"Mok. 2",ViewOnly,TAX2Sum,true,0);
      EditField(290,-21,70,"Pap. mok.",ViewOnly,TAX1Sum,true,0);
    end;
    EditField(410,-41,95,"PVM",ViewOnly ,Sum3,true,0);
  end else begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(290,-41,70,"BP %",Normal,GPProc,true,0);
      EditField(290,-21,70,"BP viso",ViewOnly,TotGP,true,0);
    end;
      EditField(410,-41,95,"Mok.",ViewOnly ,Sum3,true,0);
  end;
  EditField(410,-21,95,"Suma",ViewOnly,BaseSum4,true,0);
  EditField(-150,-41,95,"Tarp. suma",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,95,"VISO",ViewOnly ,Sum4,true,0);
  end else begin
    EditField(55,-41,80,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    EditField(55,-21,80,"PVM",ViewOnly ,Sum3,true,0);
    EditField(-120,-41,80,"Pap. mok.",ViewOnly,TAX1Sum,true,0);
    EditField(-120,-21,80,"VISO",ViewOnly ,Sum4,true,0);
  end;
  v = 24;
  MatrixBegin(4,v,-50,-49,-,200);
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kInvoiceRowTypeNormal,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Kiekis",0,Quant,true,0);
  if (HasVarieties) then begin
  MatCol(t,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Kiekis",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
  MatCol(t,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Kiekis",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeCredit,32,"Faktūros kreditas",true);
  MatCol(t,208,"",0,OrdRow,false,ARSClass);
  MatCol(t,-216,"",0,Spec,false,0);//MatText(t,-216,"",true);
  MatText(t=kInvoiceRowTypeDebit,32,"Faktūros debetas",true);
  MatCol(t,208,"",0,OrdRow,false,0);
  MatCol(t,-216,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeInterest,32,"Delspinigiai",true);
  MatCol(t,98,"",0,ArtCode,false,0);
  MatCol(t,153,"",0,Quant,true,0);
  MatCol(t,188,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeDownpayment,32,"Išankstinis apmokėjimas",true);
  MatColTL(t,122,"",0,-1,ViewOnly,0,ArtCode,true,0);
  MatColTL(t,188,"",0,-1,ViewOnly,0,Quant,true,0);
  MatCol(t,238,"",0,Spec,false,0);
  MatColTL(t,-240,"",0,-1,ViewOnly,0,Price,true,0);
  MatColTL(t,-180,"",0,-1,ViewOnly,0,vRebate,true,0);
  MatColTL(t,-140,"",0,-1,Normal,0,Sum,true,0); //?? TL?
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-100,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-70,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  end;
  MatText(t=kInvoiceRowTypePrepayment,32,"Išankstinio numeris",true);
  MatCol(t,208,"",0,CUPNr,false,ARPay3SClass);
  MatCol(t,-216,"",0,BasePrice,false,0);
  MatCol(t,-170,"",0,Price,true,0);// Price holds the #VAT# sum, Recipe holds the date of prepaym. BasePrice holds amount in base 1, TAX1Reb holds TAX1Sum
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeLoan,32,"Paskola",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeLoanInterest,32,"Paskolos palūkanos",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeUpdateMark,32,"Parašas",false);
  MatColTL(t,94,"Parašas",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeVoid,32,"Panaikintas",false);
  MatColTL(t,65,"Parašas",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,100,"Prekė",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
  MatCol(t,150,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,150,"Kiekis",0,Quant,true,0);
  end;
  MatCol(t,190,"Kaina",0,Price,true,0);
  MatCol(t,250,"Aprašymas",0,Spec,false,0);
  MatCol(t,-195,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Suma",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeSubtotal,32,"Viso",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-140,"Suma",0,-1,ViewOnly,0,Sum,true,0);
//  MatCol(t,-70,"Cost",0,Cost,true,0);
  MatText(t=kInvoiceRowTypeHidden,32,"ši ir žemiau esančios eilutės nebus spausdinamos",false);
  MatText(t=kInvoiceRowTypeCorrection,32,"K",true);
  MatCol(t,45,"Prekė",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,91,"Kiekis",0,Quant,true,0);
  MatText(t=kInvoiceRowTypeRetention,32,"Išlaikymas",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-210,"Pard.sąsk",0,-1,0,0,SalesAcc,false,AccSClass);
  MatColTL(t,-110,"Suma",0,-1,0,0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherSold,32,"D",true);
  MatCol(t,58,"",0,GCNr,false,GCSClass);
  MatCol(t,-416,"",0,Spec,false,0);
  MatCol(t,-84,"Suma",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherPayment,32,"GVR",true);
  MatCol(t,58,"",0,GCNr,false,GCSSClass);
  MatCol(t,-316,"",0,Spec,false,0);
  MatCol(t,-84,"Suma",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeCashPayment,32,"KASA",true);
  MatCol(t,94,"Suma",0,Sum,true,0);
  MatCol(t,198,"Mok. būdas",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
    MatText(t=kInvoiceRowTypeLoyaltyPointsPayment,32,"LOYPA",true);
  MatCol(t,68,"Suma",0,Sum,true,0);
  MatCol(t,108,"Taškai",0,Points,true,0);
  MatCol(t,148,"Valiuta",0,CurncyCode,true,CurncyCodeSClass);
  MatCol(t,-280,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsBonus,28,"LOYBO",true);
  MatCol(t,68,"Taškai",0,Points,true,0);
  MatCol(t,141,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeCreditCardPayment,32,"KK",true);
  MatCol(t,94,"Suma",0,Sum,true,0);
  MatCol(t,198,"Mok. būdas",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
  MatCol(t,-280,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,-84,"Autorizacija",0,AuthorizationCode,false,0);
  MatText(t=kInvoiceRowTypeHeader,32,"Antraštė",true);
  MatCol(t,100,"",0,Spec,false,0);
   MatText(t=kInvoiceRowType18,28,"Rezervuota",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType19,28,"Rezervuota",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Percepcinis mokestis",true);
  MatCol(t,132,"",0,CuAccCode,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,AccSClass);
  MatCol(t,452,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeWithholdingTax,32,"Sulaikymo mokestis",true);
  MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
  MatCol(t,172,"",0,SalesAcc,false,AccSClass);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,392,"",0,Spec,false,0);
  if (StandardHansa==false) then begin
    MatText(t=kInvoiceRowTypeMultiBuyDiscount,32,"Multipirkimų nuol.",true);
  end;
  MatCol(t,152,"",0,MBRCode,false,0);
  MatCol(t,192,"",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,-400,"",0,Spec,false,0);
  MatCol(t,-270,"",0,Quant,true,0);
  MatCol(t,-235,"",0,Price,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeDebtorsTransfer,32,"DBT TRSF",true);
  MatCol(t,94,"Spec",0,Spec,false,0);
  MatCol(t,-235,"Deb. sąsk.",0,SalesAcc,false,0);
  MatCol(t,-135,"Suma",0,Sum,true,0);
  MatCol(t,-30,"PVM kd.",0,VATCode,false,0);
  /*
  MatText(t=kInvoiceRowTypePreviousDownpayment,32,"Prev. Down Payment",true);
  MatColTL(t,152,"",0,-1,ViewOnly,0,CUPNr,true,0);
  MatColTL(t,222,"",0,-1,ViewOnly,0,ServiceDelDate,true,0);
  MatColTL(t,-200,"",0,-1,Normal,0,Price,true,0);
  MatColTL(t,-100,"",0,-1,Normal,0,Sum,true,0);
  */
  //t = 21 kInvoiceRowTypeChequePayment
  MatText(t=kInvoiceRowTypeActivationDate,32,"Aktyvavimo data",true);
  MatCol(t,130,"",0,ServiceDelDate,false,PasteCurDate);
  Flip(1);
//  MatCol(t=1,194,"Aprašymas",0,Spec,false,0);
  t=kInvoiceRowTypeNormal;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
//  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
//  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeInterest,-260,"",0,OrdRow,true,0);
  MatCol(t,-235,"",0,BasePrice,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  Flip(2);
  MatCol(t=kInvoiceRowTypeNormal,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-360,"Sąsk.",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-310,"Sukaupta",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-255,"Patalpa",0,Location,false,LocationSClass);
  // MatCol(t,-180,"Pozicija",0,PosCode,false,UsedPosSClass); //EBS
  MatCol(t,-180,"Pallets",0,UnitXval,true,0); //EBS
  if (UseTaxTemplatesforTaxCalc) then begin
  MatCol(t,-144,"Objektai",0,Objects,false,ObjSClass);
  MatCol(t,-70,"M. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-124,"Objektai",0,Objects,false,ObjSClass);
    if (HasLocalization("GBR,LTU,POL") and IsEnterprise) then begin
      MatCol(t,-60,"PVM-k",0,VATCode,false,VATCodeSClass);
      MatCol(t,-30,"Revers",0,RvrsVATCode,false,VATCodeSClass);
    end else begin
      MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
    end;
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-360,"Sąsk.",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-310,"Padidėjimas",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-255,"Patalpa",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
  // MatCol(t,-180,"Pozicija",0,PosCode,false,UsedPosSClass); //EBS
  MatCol(t,-180,"Pallets",0,UnitXval,true,0); //EBS
  end;
  if (UseTaxTemplatesforTaxCalc) then begin
  MatCol(t,-144,"Objektas",0,Objects,false,ObjSClass);
  MatCol(t,-70,"M. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-124,"Objektai",0,Objects,false,ObjSClass);
  MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeInterest,-70,"",0,SalesAcc,false,AccSClass);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
//  MatCol(t=kInvoiceRowTypePrepayment,-224,"",0,SalesAcc,false,AccSClass);
//  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-250,"Sąsk.",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-170,"Padid.",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-104,"Objektai",0,Objects,false,ObjSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-35,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  Flip(3);
  t=kInvoiceRowTypeNormal;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
  MatCol(t,-380,"Vnt. kn.",0,Price,true,0);
  MatCol(t,-315,"%",0,vRebate,true,0);
  MatCol(t,-280,"Savikaina B2",0,BasePriceB2,true,0);
  MatCol(t,-210,"Savikaina",0,BasePrice,true,0);
  MatCol(t,-140,"BP",0,rowGP,true,0);
  MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-315,"%",0,vRebate,true,0);
    MatCol(t,-280,"Savik. B2",0,BasePriceB2,true,0);
    MatCol(t,-210,"Savik.",0,BasePrice,true,0);
    MatCol(t,-140,"BP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-315,"Vnt. kn.",0,Price,true,0);
    MatCol(t,-245,"%",0,vRebate,true,0);
    MatCol(t,-210,"Savikaina",0,BasePrice,true,0);
    MatCol(t,-140,"BP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  Flip(4);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-370,"Pardavėjas",0,Salesmen,false,UserSClass);
  MatCol(t,-300,"Ser. Nr",0,SerialNr,false,SerialNrSClass);
//  MatCol(t,-250,"Main Serial No.",0,MotherNr,true,0);
  MatCol(t,-220,"K.faktorius",0,PriceFactor,true,0);
  MatCol(t,-170,"Ruošinys",0,Recepy,false,RecSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-70,"Eilutė FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-310,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"K. fakt.",0,PriceFactor,true,0);
  MatCol(t,-180,"Ruošinys",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Eilutė FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-40,"Koef.",0,Coefficient,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-310,"Ser. nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"K. fakt.",0,PriceFactor,true,0);
  MatCol(t,-180,"Ruošinys",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Eil. FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-80,"",0,MotherArtCode,false,0);
  MatCol(t,-40,"",0,RecipeQuant,false,0);
//  MatCol(t,-40,"Coeff",0,Coefficient,true,0);
  Flip(5);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Vnt.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vieneto kaina",0,UnitFactPrice,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Vienetas",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Vnt. kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vnt. kaina",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);//New Row Type..
  MatCol(t,-315,"Vnt.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vnt. kaina",0,UnitFactPrice,true,0);
  Flip(6);
  t = kInvoiceRowTypeNormal;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-390,"Pirk. Prekės Nr.",0,CustArtCode,false,CUINSClass);
  MatCol(t,-300,"Koef.",0,Coefficient,true,0);
  MatCol(t,-260,"K.faktor.",0,PriceFactor,true,0);
  if (UserCanAction("HWContractAdmin",false) or UserCanAction("HWContractCUServiceHistEdit",false) or UserCanAction("HWContract_LocalAdmin",false)) then begin
  MatCol(t,-210,"Pasl. kontr. ist.",0,CUServiceHistNr,false,0);
  end;
  MatCol(t,-130,"Kred. eil.",0,CreditedRow,false,0);
  MatCol(t,-70,"Aplink. mok.",0,RepaExVAT,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-390,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass);
  MatCol(t,-300,"Koef.",0,Coefficient,true,0);
  MatCol(t,-260,"K.faktor.",0,PriceFactor,true,0);
  if (UserCanAction("HWContractAdmin",false) or UserCanAction("HWContractCUServiceHistEdit",false) or UserCanAction("HWContract_LocalAdmin",false)) then begin
  MatCol(t,-210,"Pasl. kontr. ist.",0,CUServiceHistNr,false,0);
  end;
  MatCol(t,-130,"Kred. eil.",0,CreditedRow,false,0);
  MatCol(t,-70,"Aplink. mok.",0,RepaExVAT,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);//New Row Type..
  MatCol(t,-80,"Aplinkos mok.",0,RepaExVAT,true,0);
  Flip(7);
  t = kInvoiceRowTypeNormal;
  if (GuiType!=kGuiiPhone) then begin
    MatCol(t,144,"Aprašymas",0,Spec,false,0);
  end;
  MatCol(t,-240,"Muito Nr.",0,CustomsNr,false,0);
  MatCol(t,-100,"Kilmės šalis",0,CountryOfOrg,false,CountrySClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-240,"Muito Nr.",0,CustomsNr,false,0);
  MatCol(t,-100,"Kilmės šalis",0,CountryOfOrg,false,CountrySClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-240,"Muito Nr.",0,CustomsNr,false,0);
  MatCol(t,-100,"Kilmės šalis",0,CountryOfOrg,false,CountrySClass);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusIVDsm");
  RowMenuItem(0,"Ankstesnė pardavimo kaina",' ',' ',0,"IVLastSPrsm");
  RowMenuItem(0,"Pridėti antraštės eilutę",' ',' ',0,"HeaderLineIVDsm");
  RowMenuItem(0,"Pridėti paslėptą eilutę",' ',' ',0,"HiddenLineIVDsm");
  if (HasLocalization("SVN")==false) then begin
    RowMenuItem(0,"Pridėti grynųjų eilutę",' ',' ',0,"CashLineIVDsm");
    RowMenuItem(0,"Pridėti kreditinės kort. eilutę",' ',' ',0,"CreditCardLineIVDsm");
  end;
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Pridėti sulaikymą",' ',' ',0,"RetentionLineIVDsm");
  end;
  RowMenuItem(0,"Pridėti tarpinęsumą",' ',' ',0,"SubTotalLineIVDsm");
  RowMenuItem(0,"Apple garantinės būklės tikrinimas",'w',' ',0,"WarrantyStatusIVDsm");
  if (FileExists("hob/hmdatadef.hob")) then begin//??? why here and not it ahansamail ?
    RowMenuItem(0,"Pridėti licenzijos pradžios datą",' ',' ',0,"LicStartIVDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 22;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
  EditField(h,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
  EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 310; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Siunt. terminas",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Siunt. būdas",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Maršrutas",Normal,Sorting,false,DelRouteSClass);
  EditField(h1,v+=vs,80,"Patalpa",Normal,Location,false,LocationSClass);
    EditField(h1,v+=vs,80,"Plan. siunt. data",Normal,PlanSendDate,false,PasteCurDate);
    EditField(h1,v+=vs,80,"Plan. siunt. data",Normal,PlanSendTime,false,PasteCurTime);
  end;
  EditField(h1,v+=vs,80,"Filialas",Normal,BranchID,false,AllCUSClass);
  EditField(h2,v=vm,80,"Viso kiekis",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Viso svoris",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Viso tūris",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Frachtas",Normal,FrPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Plan. atv. data",Normal,PlanArrDate,false,PasteCurDate);
    EditField(h2,v+=vs,80,"Plan. atv. laiaks",Normal,PlanArrTime,false,PasteCurTime);
  	EditField(h2,v+=vs,80,"Frachto įm.",Normal,FreightCode,false,FreightCompanySClass);
  	CheckBox(h3,v=vm,0,"Atnaujinti sand.",UpdStockFlag);
  	EditField(h3,v+=2*vs,80,"Frachtas #PVM kd.#",Normal,FrVATCode,true,VATCodeSClass);
  	EditField(h3,v+=vs,80,"Intrastat oper. kd.",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);
    EditField(h3,v+=vs,80,"Glob. transp. nr.",Normal,GlobalTransportNr,false,0);
    EditField(h3,v+=vs,80,"Glob. transp. data",Normal,GlobalTransportDate,false,PasteCurDate);
  end;
  Tile(5,170,false,"5",OrderNr);
  EditField(h1,v=vm,80,"Užsk. nr.",ViewOnly,OrderNr,false,0);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Pasl. Užsk. nr.",ViewOnly,SVONr,false,0);
  EditField(h1,v+=vs,80,"Kred. rank. nr.",ViewOnly ,CredManNr,false,0);
  end;
  EditField(h1,v+=vs,135,"Oficialus Nr 2.",Normal,OfficialSerNr2,false,0);
  if (HasLocalization("FIN")) then begin
    EditField(h1,v+=vs,135,"Delivery Site Code",Normal,DeliverySiteCode,false,0);
    EditField(h1,v+=vs,135,"Work Site Number",Normal,WorkSiteNumber,false,0);
  end;
  if (HasLocalization("BRA")) then begin
    EditField(h1,v+=vs,80,"Federal Service",Normal,FedServCode,false,FederalSerSClass);
  end;
  if (HasLocalization("ARG,BOL")) then begin
    EditField(h1,v+=vs,135,"CAE/CAEA",Normal,CAE,false,0); //!!TRANSLATE
    EditField(h1,v+=vs,135,"CAE Expiry",Normal,CAEExpiry,false,0); //!!TRANSLATE
    EditField(h1,v+=vs,70,"CAEA Start",ViewOnly,CAEAStartDate,false,0); //!!TRANSLATE
  end;

  EditField(h2=350,v=vm,80,"Stat. vertė",Normal,StatVal,true,0);
  EditField(h2,v+=vs,80,"Trans. laikas",Normal,TransTime,false,SetSClass);
  EditField(h2,v+=vs,80,"Spausdinimo data",ViewOnly,PrintDate,false,0);
  EditField(h2,v+=vs,80,"Oprt. komentaras",ViewOnly,OYDescription,false,0);
  if (FileExists("hob/hmdatadef.hob")) then begin//??? why here and not it ahansamail ?
    EditField(h2,v+=vs,80,"Inv.Nr",ViewOnly,ToBeIVNr,false,0);
  end;
//  ColourPushButton(-100,v,-20,v+60,"TestIVDClassCardData","Test" & chr(10) & "CardData",4);
//  SoftEditField(h3+50,v,100,"Valdymo kodas"  ,ViewOnly ,"TaxAuthIDCC",false,0,M4Str,60);
  if (StandardHansa==false) then begin
  if (HasLocalization("ARG,BOL")) then begin
      EditField(h2,v+=vs,135,"Mok. autor. ID",Normal,TaxAuthID,false,0);
  	EditField(h2,v+=vs,135,"Kontrolės kd.",ViewOnly ,TaxAuthIDCC,false,0);
  	end;
    if (HasLocalization("PRT")) then begin
		EditField(h2,v+=vs,135,"Būklė",Normal,Status,false,SetSClass);
    end;
    if (HasLocalization("ARG,PRT")) then begin
      EditField(h2,v+=vs,135,"Tax Type",Normal,TaxInvType,false,SetSClass); //!!TRANSLATE
    end;
    if (HasLocalization("ARG")) then begin
      EditField(h2,v+=vs,70,"CAEA Expiry",ViewOnly,CAEAExpiryDate,false,0);
    end;
    if (HasLocalization("SVN")) then begin
      EditField(h2,v+=vs,180,"E-Inv. Conf. No.",ViewOnly,TaxAdminReceiptNr,false,0);
      EditField(h2,v+=vs,180,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
    end;
  end;
  //  EditField(h2,v+=vs,135,"E-Inv Exp. Date",ViewOnly,EInvExpDate,false,0);//Tx server
  //  EditField(h2,v+=vs,135,"E-Inv Exp. Qty",ViewOnly,EInvExpQty,false,0);
  CheckBox(h3=450,v=vm,0,"Be priminimų",NoRemndrFlag);
  CheckBox(h3,v+=16,0,"Be delspinigių",NoInterestFlag);
  CheckBox(h3,v+=16,0,"Be rinkinio",NoColectionFlag);
  CheckBox(h3,v+=16,0,"Fiskalinė fakt.",FiscalFlag);
  CheckBox(h3+130,v=vm,0,"Pirk. Inf. operacijoje",ARonTR);
  CheckBox(h3+130,v+=16,0,"Nesiųsti kaip E-fakt.",NoEInvoice);
  CheckBox(h3+130,v+=16,0,"Sav. atsisk.",SelfBilling);
  CheckBox(h3+130,v+=16,0,"Siuntimo kvito PVM",IPBookVAT);
  if (HasLocalization("LTU")) then begin
    CheckBox(h3+130,v+=16,0,"Neįtraukti į eksportus",ExcludeFromExports);
  end;
  //    CheckBox(h3,v+=16,0,"Including VAT",InclVAT);
  //  CheckBox(h3,v+=16,0,"E-Invoice Exported",EInvExpFlag);
  Tile(6,150,false,"6",PriceList); vs = 20; h3=550;
  EditField(h1,v=vm,80,"Kainoraštis",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Nuolaidų lentelė",Normal,RebCode,false,0);
//  EditField(h1,v+=vs,80,"Disc. %",ViewOnly,DiscPerc,false,0);
//  EditField(h1,v+=vs,80,"Disc. Amount",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Orig. pirkėjas",ViewOnly,OrgCust,false,0);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Kreditinė kortelė",Normal,CreditCard,false,CreditCardSClass);
  EditField(h1,v+=vs,80,"Autorization",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,80,"Debitoriai",Normal,ARAcc,false,AccSClass);
  EditField(h1,v+=vs,-20,"Komentaras",Normal,InvComment,false,0);
  if (HasSalesGroup) then begin
    EditField(h2=310,v=vm,80,"Pard. grupė",ViewOnly,SalesGroup,true,0);
  	EditField(h2,v+=vs,80,"Kalba",Normal,LangCode,false,LangSClass);
  end else begin
    EditField(h2,v=vm,80,"Kalba",Normal,LangCode,false,LangSClass);
  end;
  EditField(h2,v+=vs,80,"Komisiniai",Normal,Commision,true,0);
  EditField(h2,v+=vs,80,"Viso su komis.",ViewOnly,SumIncCom,true,0);
  EditField(h2,v+=vs,80,"Delspinigiai",Normal,IntCode,true,IntSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Org. Nr.",Normal,CredInv,false,0);
  EditField(h3,v=vm,80,"Primin. lygis",Normal,LastRemndr,false,0);
  end else begin
    EditField(h3,v=vm,80,"Org. Nr.",Normal,CredInv,false,0);
    EditField(h3,v+=vs,80,"Primin. lygis",Normal,LastRemndr,false,0);
  end;
  EditField(h3,v+=vs,80,"Pask. primin. data",Normal,LastRemDate,false,PasteCurDate);
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,80,"Lojalumo kortelė",Normal,LoyaltyCardNr,false,LoyaltyCardSClass);
  end;
    EnterSkip(Math);
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,80,"Narystės lygis",ViewOnly,LCMLevel,false,LCMemberLevelSClass);
  EditField(h3,v+=vs,80,"Lojalumo taškai",ViewOnly,Points,true,0);
  end;
  if (HasTREO) then begin
    EditField(h3,v+=vs,80,"TREO Nr.",Normal,TREONr,false,0);
  end;
  Tile(7,250,false,"7",Addr1); vs = 20;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Faktūra"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Adresas"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Šalis",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h2-89,v,232,"",ViewOnly,InvCountryName,false,0);
    h5 = -170;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  EditField(h5,v,width,"Faktūra",Normal,BankCode,false,BankSClass);
  if (StandardHansa==false) then begin
    if (HasApprovals) then begin
      SoftEditField(h3=h+4,v=(vm+=40),123,"Patvirtinimo būsena",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
    end;
/*
//oldapprovals
  ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Neprašoma",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Laukiama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atsakyta",AcceptanceStatus);
*/
    v = VATZoneButtonsLabelslit(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelslit(h3=290,v=vm+40,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Regionas",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"PVM Reg. Nr.",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"Įmonės kodas",Normal,RegNr1,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);
  EditField(h2,v+=vs,150,"Telefonas",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Faksas",Normal,Fax,false,0);
  Tile(8,170,false,"8",ShipAddr0); vs = 20;
  if (StandardHansa==false) then begin
    EditField(h1,v=6,80,"Adreso kd.",Normal,DelAddrCode,false,DelAddr3SClass);
    EditField(h1,v+=vs,-20,"Siuntimas",Normal,ShipAddr0,false,0);
  end else begin
    EditField(h1,v=6,-20,"Siuntimas",Normal,ShipAddr0,false,0);
  end;
  EditField(h1,v+=vs,-20,"Adresas",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Šalis",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0);
  end;
  EditField(h2,v,150,"Siuntimo GLN",ViewOnly,DelRecipientGLN,false,0);
  EnterSkip(InvDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Faktūros būklė",'r',2,"IVInfoIVDsm");
    SpecialMenu("Prekės būklė",'I',0,"ItemStatusIVDsm");
    SpecialMenu("Atidaryti D/K operaciją",'t',8,"OpenTRFromIV");
    SpecialMenu("Sukurti kredito pažymą",' ',20,"CreateCreditNoteIVDsm");
    SpecialMenu("Pridėti tarpinę sumą",' ',12,"SubTotalLineIVDsm");
    SpecialMenu("Prijungti prie išankstinio",' ',4,"ConnectToPrepayIVDsm");
/*not working yet
    SpecialMenu("Create E-Mail",'m',23,"CreateMailFromIVDsm");
*/
  end else begin
//  SpecialMenu("Prekės būklė",'I',0,"ItemStatusIVDsm");
    SpecialMenu("Pirkėjo būklė",'e',0,"CUStatusIVDsm");
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  SpecialMenu("Faktūros būklė",'r',2,"IVInfoIVDsm");
  SpecialMenu("Prijungti aplinkos mokestį",' ',19,"RepaIVsm");
  if (GuiType==kGuiiPhone) then begin
    //SpecialMenu("Pasirašyti",' ',10,"SignIVDsm");//what is that ?
  end;
  SpecialMenu("Pakeisti į bazinę val. 1",' ',14,"SwitchToBase1IVDsm");
  SpecialMenu("Prijungti prie išankstinio",' ',4,"ConnectToPrepayIVDsm");
  SpecialMenu("Perskaičiuoti nuolaidą",' ',11,"RecalcDiscountIVDsm");
  SpecialMenu("Perskaičiuoti svorį ir tūrį",' ',10,"RecalcWeightIVDsm");
  SpecialMenu("Atnaujinti valiutinį kainoraštį",' ',5,"UpdatePricesIVDsm");
  SpecialMenu("Spausdinti kasos pajamas-išlaidas",' ',7,"PrintCashInOutIVDsm");
    if (HasLocalization("PRT")==false) then begin
  SpecialMenu("Spausdinti proforma faktūrą",' ',3,"PrintProformaIVDsm");
    end;
  if (StandardHansa==false) then begin
  SpecialMenu("Spausdinti į fiskalinį spausdintuvą",' ',19,"PrintToFiscPrntIVDsm");
  SpecialMenu("Mokėjimas kortele",' ',22,"CCPayIVDsm");
  SpecialMenu("Keisti dalinius mokėjimus",' ',24,"EditInstalmentIVDsm");
  end;
	if (HasLocalization("EST")) then begin
		SpecialMenu("Persiųsti E-faktūrą",' ',21,"ResendEstEIVDsm");
	end else begin
		SpecialMenu("Persiųsti E-faktūras",' ',21,"ResendEIVDsm");
	end;
  if (HasLocalization("ARG")) then begin
      SpecialMenu("Persiųsti Argentinos el. faktūrą",'n',17,"SendArgEInvIVDsm");
    SpecialMenu("Retrive CAE/CAEA",'',17,"ConsultarArgEInvIVDsm");
  end;
  if (HasLocalization("MEX")) then begin
      SpecialMenu("Send Mexican E-Invoice",'e',17,"SendMexEInvIVDsm");
    end;
    if (HasLocalization("BRA")) then begin
    SpecialMenu("Send/Resend Brazilian E-Invoice",' ',27,"SendBraEInvIVDsm");
  end;
    if (HasLocalization("FIN")) then begin
      SpecialMenu("Export Finvoice",' ',28,"ExportFinvoiceIVDsm");
    end;
    if (HasLocalization("USA")) then begin
      SpecialMenu("Gauti mokesčių tarifus",' ',0,"IVGetTaxRatesDsm");
    end;
  SpecialMenu("Atidaryti D/K operaciją",'t',8,"OpenTRFromIV");
	if (StandardHansa==false) then begin
		SpecialMenu("Vadovo nuolaidos perrašymas",' ',24,"MgrsDiscOverrideIVDsm");
		if (HasTaxMatrix) then begin
			SpecialMenu("Atidaryti mok. matricą",' ',25,"TestVatMatrixIVDsm");
		end;
	end;
    if (HasApprovals) then begin
      SpecialMenu("Užklausos patvirtinimas",' ',6,"IVSendforAcceptanceIVDsm");
      SpecialMenu("Atšaukti užklausos patvirtinimą",' ',2,"CancelApprovalRequestDsm");
    end;
	SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModCRM) then begin
//    SpecialMenu("Sukurti veiklą",'c',9,"CreateActFromIVDsm");
  end;
  SpecialMenu("Sukurti kasos pajamas",' ',1,"DoCLInFromIVD");
  SpecialMenu("Sukurti kredito pažymą",' ',20,"CreateCreditNoteIVDsm");
  if (StandardHansa==false) then begin
  SpecialMenu("Sukurti kredito sutartį",' ',25,"CreateCredManIVsm");
  end;
  SpecialMenu("Sukurti kontraktą",' ',13,"COFromIVDsm");
  if (StandardHansa==false) then begin
    if (HasLocalization("PRT")==false) then begin
      SpecialMenu("Sukurti koregavimo faktūrą",' ',16,"CorrectionIVsm");
    end;
    SpecialMenu("Sukurti kredito įrašą",' ',20,"CreateDebitNoteIVDsm");
  SpecialMenu("Sukurti EDI faktūrą",' ',9,"DoEDIInvFromIVD");
  end;
  SpecialMenu("Sukurti el. laišką",'m',23,"CreateMailFromIVDsm");
  if (HasLocalization("UKR")) then begin
  SpecialMenu("Sukurti pirmą atvejį",' ',18,"FirstEventIVDsm");
  end;
  if (StandardHansa==false) then begin
  	SpecialMenu("Sukurti dalinių mokėjimų įplaukas",' ',6,"CreateInstalmentsIVDsm");
    if (HasLocalization("HRV,POL,RUS,SRB,SLV,UKR")) then begin
  		SpecialMenu("Sukurti PVM koregavimą pard. kn.",' ',17,"VATCorrectionIVsm");
    end;

//  SpecialMenu("GSXAutoEnrollmentIVDsm",'w',26,"GSXAutoEnrollmentIVDsm");

//  SpecialMenu("TESTSendArgEInvoiceFECAESolicitar",' ',25,"TESTSendArgEInvoiceFECAESolicitar");
//  SpecialMenu("Test Mex E-Invoices",'1',0,"TestMexEInvoices");
    end;
    SpecialMenu("Pridėti pirkėją",' ',0,"AddCustomerIVDsm");
    SpecialMenu("Pridėti prekę",' ',0,"AddItemIVDsm");
  end;

end else begin
  date td;
  integer acnt,wn;
  longint bm,lt,rt,tp,page;
  real h,h2,h3,h4,v;
  record IVVc IVr;
  record LocalMachineBlock LMb;
  record POSButtonsVc POSBr;
  string 255 bc1,bc2,compname,lmc,nr,sessdesc,sm;
  time tt;

  BlockLoad(LMb);

    //StopAlert(LMb.POSButtonGroup);

    wn = CurWindow;
    GetScreenSize(wn,tp,lt,bm,rt);
    switch (GuiType) begin
      case kGuiCocoa:
        bm = bm - 80;
      case kGuiWindowsDesktop:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
      case kGuiGDI:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
      case kGuiWPF:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
    end;

    page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
    if (page<1) then begin
      page = 1;
    end;
    //stopalert("about to call ReadPOSButtons, page:" & page);
    ReadPOSButtons("IVDClass",LMb.POSButtonGroup,page,bc1,bc2,compname,POSBr,acnt);
    SetWRect(lt,tp,rt,bm);
    AbsoluteWindowSize;
    if (TestEnablerFile("EnNoFullscreenWindow")==false) then begin
      FullscreenWindow;
    end;
    BrowseButtons(false);
    BrowseButtons(false);
    DynamicWindow;
    UseView(IVVc);
    ActiveFieldOnNew("ivcashcommand");
    if (GuiType!=kGuiiPhone) then begin
      ToolBar;
//      PushButton(-340,5,-340 + 34,5+18,ToolPasteSpec,"v");
      EndToolBar;
    end;

    v = 20;
    h = -300; h2 = -150; h3 = -70; h4 = -10;

    wn = CurWindow;
    if (wn>0) then begin
      switch (GetWindowClass(wn)) begin
        case "IVDClass":
          GetWindowRecord(wn,IVr);
      end;
    end;
    if (GuiType==kGuiiPhone) then begin
      if (TouchScreenLookVertical) then begin
        v = 20;
        h = -300; h2 = -150; h3 = -70; h4 = -10;

        td = IVr.TransDate;
        if (blankdate(td)) then begin td = CurrentDate; end;
        tt = IVr.TransTime;
        if (blanktime(tt)) then begin tt = CurrentTime; end;
        lmc = IVr.MachineName;
        if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
        sm = IVr.SalesMan;
        if (blank(sm)) then begin sm = CurrentUser; end;
        nr = "Faktūra: ";
        if (IVr.SerNr>0) then begin
          nr = nr & IVr.SerNr;
        end;

        if (IsEnterprise) then begin
          if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
            sessdesc = "POS Sesija atidaryta";
          end else begin
            sessdesc = "*** POS Sesija uždaryta ***";
          end;
        end;

        DisplayRecordDetails_LIT(10,-100,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,
          IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,
          IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","",
          "",blankval,sessdesc,true,IVr.OfficialSerNr,
          IVr.TaxAdminServSeal);

        SoftEditFieldTLX(360,-120,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0);
        SoftEditFieldTLX(360,-80,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0);

        SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);

        DrawPOSInterface_LIT(bc1,bc2,POSBr,acnt,"",100);
      end else begin

        v = 20;
        h = -300; h2 = -150; h3 = -70; h4 = -10;

        td = IVr.TransDate;
        if (blankdate(td)) then begin td = CurrentDate; end;
        tt = IVr.TransTime;
        if (blanktime(tt)) then begin tt = CurrentTime; end;
        lmc = IVr.MachineName;
        if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
        sm = IVr.SalesMan;
        if (blank(sm)) then begin sm = CurrentUser; end;
        nr = "Faktūra: ";
        if (IVr.SerNr>0) then begin
          nr = nr & IVr.SerNr;
        end;

        if (IsEnterprise) then begin
          if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
            sessdesc = "POS Sesija atidaryta";
          end else begin
            sessdesc = "*** POS Sesija uždaryta ***";
          end;
        end;

        DisplayRecordDetails_LIT(10,26,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,
          IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,
          IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","",
          "",blankval,sessdesc,true,IVr.OfficialSerNr,
          IVr.TaxAdminServSeal);


        if (bm<650) then begin
          SoftEditFieldTLX(360,6,h4,"",M4Str,ViewOnly,100,20,patM4black,"CustomerDisplayData_Line1",true,0);
          SoftEditFieldTLX(360,36,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line2",true,0);
        end else begin
          SoftEditFieldTLX(360,6,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0);
          SoftEditFieldTLX(360,46,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0);
        end;

        SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);

        DrawPOSInterface_LIT(bc1,bc2,POSBr,acnt,"",100);
      end;
      BottomBar;
    end else begin
      td = IVr.TransDate;
      if (blankdate(td)) then begin td = CurrentDate; end;
      tt = IVr.TransTime;
      if (blanktime(tt)) then begin tt = CurrentTime; end;
      lmc = IVr.MachineName;
      if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
      sm = IVr.SalesMan;
      if (blank(sm)) then begin sm = CurrentUser; end;
      nr = "Faktūra: ";
      if (IVr.SerNr>0) then begin
        nr = nr & IVr.SerNr;
      end;

      if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
        sessdesc = "POS Sesija atidaryta";
      end else begin
        sessdesc = "*** POS Sesija uždaryta ***";
      end;

      // StopAlert("IsSessionOpen(" & IVr.MachineName & "," & IVr.DrawerCode & "," & IVr.TransDate & "," & IVr.TransTime & "); -> " & sessdesc);

      DisplayRecordDetails_LIT(10,26,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","","",blankval,sessdesc,true,IVr.OfficialSerNr,IVr.TaxAdminServSeal);

      if (bm<650) then begin
      SoftEditFieldTLX(420,6,h4,"",M4Str,ViewOnly,100,20,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(420,36,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line2",true,0); //!!TRANSLATE
    end else begin
      SoftEditFieldTLX(520,6,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0); //!!TRANSLATE
      SoftEditFieldTLX(520,46,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0); //!!TRANSLATE
      end;

      switch (LMb.POSButtonsPosition) begin
        case kPOSButtonsPositionLeft:
          SoftEditField(110,-22,200,"Prekė/Komanda"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
        case kPOSButtonsPositionRight:
          SoftEditField(-260,-22,200,"Prekė/Komanda"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
      end;
    SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);
    DrawPOSInterface_LIT(bc1,bc2,POSBr,acnt,"",100);
    BottomBar;
  end;
end;
  EndWindow;
end;

window IVGPRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("BP, faktūros",IVGPRClass,CGRcW,RcType);
  SetWRect(20,80,480,320);
  vs = 20;
  Tile(0,20,false,"",Period2Str);
  PeriodField(150,v=6,"Periodas");
  TileButtons(v,2);
  Tile(1,280,false,"1",f3);
  v = 6;
  EditFieldTL(h=150,v, 150,"Faktūros nr.",  M4Str,Normal,30,f1,false,0);
  EditFieldTL(h,v+=vs ,150,"Pirkėjas",M4UStr,Normal,50,f2,false,CUSClass);
  EditFieldTL(h,v+=vs ,150,"Kategorija",M4UStr,Normal,50,f7,false,CCatSClass); //EBS
  if (HasSalesman or HasSalesmanBonus) then begin
  	EditFieldTL(h,v+=vs ,100,"Pardavėjas",M4UStr,Normal,10,AccStr,false,UserSClass);
  end;
  if (HasSalesGroup) then begin
    EditFieldTL(h,v+=vs ,50,"Pard. grupė",M4UStr,Normal,10,f5,false,SalesGroupSClass);
  end;
  EditFieldTL(h,v+=vs ,150,"Prekė",M4UStr,Normal,20,FirstAcc,false,INSClass);
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs ,150,"Prekės klasė",M4UStr,Normal,200,f6,false,DISClass);
  end;
  if (HasItemGroups) then begin
  EditFieldTL(h,v+=vs ,80,"Prekės grupė",M4UStr,Normal,5,LastAcc,false,ITSClass);
  end;
  if (HasObjects) then begin
  EditFieldTL(h,v+=vs ,150,"Objektas",M4UStr,Normal,60,ObjStr,false,ObjSClass);
  EditFieldTL(h,v+=vs ,150,"Objektas iš eilučių (detal.)",M4UStr,Normal,60,f3,false,ObjSClass);
  end;
  EditFieldTL(h,v+=vs ,50,"Mokėjimo sąlyga",M4UStr,Normal,5,TransStr,false,PDSClass);
  ButtonFrame(h=60,vm=(v+=45),123,2,"Funkcija");
  RadioButton(h,v,0,0,"Peržiūra",ArtMode);
  RadioButton(h,v+=16,1,0,"Detaliai",ArtMode);
  ButtonFrame(h=250,v=vm,123,2,"Būklė");    //changed
  CheckBox(h,v,0,"Nepatvirtintos",flags[1]);
  CheckBox(h,v+=16,0,"Patvirtintos",flags[2]);
  Tile(2,310,false,"2",f4);
  h=150; v = 6;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v,100,"Patalpa",M4UStr,Normal,60,f4,false,LocationSClass); //added
  end;
    EditFieldTL(h,v+=20,80,"Šaka",M4Code,Normal,20,Stext,false,ContactCUSClass);
  ButtonFrame(h=60,vm=(v+=45),123,3,"Funkcija");
  RadioButton(h,v,0,0,"Savikaina",flags[11]);
  if (HasBase2) then begin
  RadioButton(h,v+=16,2,0,"Savikaina baz. val. 2",flags[11]);
  end;
  RadioButton(h,v+=16,1,0,"Eilės savikaina",flags[11]);
  EndFrame;
  ButtonFrame(h=210,v=vm,130,6,"Įtraukti");
  CheckBox(h,v,0,"Normalias",flags[3]);
  CheckBox(h,v+=16,0,"Kasos",flags[4]);
  CheckBox(h,v+=16,0,"Kred. pažymas",flags[5]);
  if (StandardHansa==false) and (IsStandardProduct==false) then begin
  CheckBox(h,v+=16,0,"Palūkanas",flags[6]);
  CheckBox(h,v+=16,0,"Apmok. iš anksto",flags[7]);
  CheckBox(h,v+=16,0,"Dalinius apmok.",flags[8]);
  end;
  if (HasModSVO) then begin
    CheckBox(h,v+=32,0,"Tik pasl. užs. faktūras",flags[10]);
  end;
  CheckBox(h,v+=16,0,"Įtraukti POS faktūras",flags[12]);
  EndFrame;
  EndWindow;
end;

window ORDClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs,h5,flipnr,width;
  string 255 label;
  Integer rn;

  WindowBegin("Užsakymas",ORDClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(ORVc);
  ActiveFieldOnNew("CustCode");
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Pirkėjas",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Pavadinimas",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
  EditField(h,vm=(v+=20),135,"Oficialus Nr.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  CheckBox(h4=-100,v,0,"OK",OKFlag);
  end else begin
    CheckBox(h4=-100,vm=(v+=20),0,"OK",OKFlag);
  end;
//  CheckBox(h+120,vm,0,"Closed",Closed);
//  CheckBox(h+240,vm,0,"Reserved",Reserved);
  TileButton(1,"Terminai");
  TileButton(2,"Prekės");
  TileButton(3,"Valiuta");
  TileButton(4,"Siunt. terminai");
  TileButton(5,"Kainodara");
  TileButton(6,"Fakt. adr.");
  TileButton(7,"Siunt. adr.");
  Tile(1,110,false,"1",OrdDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Data",Normal,OrdDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Mok. terminas",Normal,PayDeal,false,PDSClass);
  EditField(h1,v+=vs,82,"Plan. siuntimas",Normal,PlanShip,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Siuntimo data",Normal,DespatchDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Siuntimo laikas",Normal,DespatchTime,false,PasteCurTime);
  EditField(h2,v=vm,135,"Mūsų nuor.",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Perspėjimas",Normal,CustContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Objektai",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Nuoroda",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"Pirk. užs. Nr.",Normal,CustOrdNr,false,0);
  EditField(h3,v=vm,80,"Pardavėjas",Normal,SalesMan,false,UserSClass);
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,80,"Projektas",Normal,PRCode,false,PRSClass);
  end;
  EditField(h3,v+=vs,80,"Užsak. klasė",Normal,OrderClass,false,OrderClassSClass);
  if (StandardHansa==false) then begin
  EditField(h3,v+=vs,80,"Užsak. tipas",Normal,OrderType,false,SetSClass);
    EditField(h3,v+=vs,80,"Pard. sutartis",Normal,ORCONr,false,ORCOSClass);
  end;
  CheckBox(h4,v=6,0,"Uždarytas",Closed);
  CheckBox(h4,v+=16,0,"Rezervuotas",Reserved);
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
//  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(55,-41,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  if (UseTaxTemplatesforTaxCalc==false) then begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(160,-41,70,"BP %",Normal,GPProc,true,0);
      EditField(160,-21,70,"Viso BP",ViewOnly,TotGP,true,0);
    end;
    if (HasLocalization("GBR,LTU,POL")) then begin
      EditField(310,-41,50,"Reversinis PVM",ViewOnly,RvrsVAT,true,0);
      EditField(290,-21,70,"Ext. mokest.",ViewOnly,TAX1Sum,true,0);
    end else begin
      EditField(290,-41,70,"Mok. 2",ViewOnly,TAX2Sum,true,0);
      EditField(290,-21,70,"Pap. Mok.",ViewOnly,TAX1Sum,true,0);
    end;
    EditField(410,-41,100,"PVM",ViewOnly ,Sum3,true,0);
  end else begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(290,-41,70,"BP %",Normal,GPProc,true,0);
      EditField(290,-21,70,"Viso BP",ViewOnly,TotGP,true,0);
    end;
    EditField(410,-41,100,"Mok.",ViewOnly ,Sum3,true,0);
  end;
  EditField(410,-21,100,"Suma",ViewOnly,BaseSum4,true,0);
  EditField(-150,-41,100,"Tarp. suma",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,100,"VISO",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(3,v,-50,-49,-,200);
  MatTypedRow(stp);
  flipnr = 0;
  Flip(flipnr); flipnr = flipnr + 1;
  MatText(t=9,32,"Tarp. suma",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-80,"Suma",0,-1,ViewOnly,0,Sum,true,0);
  MatText(t=17,32,"Antraštė",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatCol(t=1,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Kiekis",0,Quant,true,0);
  t = 1;
  if (HasVarieties) then begin
  MatCol(t,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Kiekis",0,Quant,true,0);
  end;
    EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Prekė",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Kiekis",0,Quant,true,0);
  if (HasVarieties) then begin
  MatCol(t,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Kiekis",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=10,32,"Spausdinant, ši ir toliau einančios eilutės bus paslėptos",false);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Percepcijos mok.",true);
  MatCol(t,132,"",0,Region,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,0);
  MatCol(t,452,"",0,Spec,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
//  MatCol(t=1,194,"Aprašymas",0,Spec,false,0);
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vieneto kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-224,"Sąsk.",0,SalesAcc,false,AccSClass);
    MatCol(t,-164,"Objektas",0,Objects,false,ObjSClass);
    if (HasLocalization("GBR,LTU,POL") and IsEnterprise) then begin
      MatCol(t,-60,"PVM-K",0,VATCode,false,VATCodeSClass);
      MatCol(t,-30,"Revers",0,RvrsVATCode,false,VATCodeSClass);
    end else begin
      MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
    end;
  end else begin
    MatCol(t,-264,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass);
    // MatCol(t,-184,"Sąsk.",0,SalesAcc,false,AccSClass); //EBS
    MatCol(t,-284,"Paletės",0,UnitXval,true,0); //EBS
    MatCol(t,-124,"Objektas",0,Objects,false,ObjSClass);
    if (HasLocalization("GBR,LTU,POL") and IsEnterprise) then begin
      MatCol(t,-60,"PVM-K",0,VATCode,false,VATCodeSClass);
      MatCol(t,-30,"Revers",0,RvrsVATCode,false,VATCodeSClass);
    end else begin
      MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
    end;
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-224,"Sąsk.",0,SalesAcc,false,AccSClass);
    MatCol(t,-164,"Objektas",0,Objects,false,ObjSClass);
    MatCol(t,-70,"M. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Pirk. prekės Nr.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-184,"sąsk.",0,SalesAcc,false,AccSClass);
    MatCol(t,-124,"Objektas",0,Objects,false,ObjSClass);
    MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,344,"Užsakymo tipas",0,OrderType,false,SetSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-245,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-175,"%",0,vRebate,true,0);
    MatCol(t,-140,"Savikaina",0,BasePrice,true,0);
    MatCol(t,-70,"BP",0,rowGP,true,0);
  end else begin
    MatCol(t,-235,"Vieneto kaina",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
    if (UserCanAction("ViewCostPrice",true)) then begin
     MatCol(t,-245,"Vnt. kaina",0,Price,true,0);
     MatCol(t,-175,"%",0,vRebate,true,0);
     MatCol(t,-140,"Savikaina",0,BasePrice,true,0);
     MatCol(t,-70,"BP",0,rowGP,true,0);
   end else begin
    MatCol(t,-235,"Vnt. kaina",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Suma",0,Sum,true,0);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Apraš.",0,Spec,false,0);
  MatCol(t,-300,"Pardavėjas",0,Salesmen,false,UserSClass);
  MatCol(t,-236,"Siunt. 1",0,Shipd1,true,0);
  MatCol(t,-184,"Siunt. 2",0,Shipd2,true,0);
  MatCol(t,-132,"Faktūruota",0,Invd,true,0);
  MatCol(t,-80,"Ruošinys",0,Recepy,false,RecSClass);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Apraš.",0,Spec,false,0);
  MatCol(t,-290,"Siunt. 1",0,Shipd1,true,0);
  MatCol(t,-220,"Siunt. 2",0,Shipd2,true,0);
  MatCol(t,-150,"Faktūruota",0,Invd,true,0);
  MatCol(t,-80,"Ruošinys",0,Recepy,false,RecSClass);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-290,"Serijinis nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Plan. siunt.",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Kainos faktorius",0,PriceFactor,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-290,"Serijinis nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Plan. siunt.",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Kainos faktorius",0,PriceFactor,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Siuntimo pažyma",0,ShipNote,false,0);
  MatCol(t,-210,"Patalpa",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-145,"Pozicija",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Šaltinis",0,Source,true,SourceSClass);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Siuntimo žinutė",0,ShipNote,false,0);
  MatCol(t,-210,"Patalpa",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
  MatCol(t,-145,"Pozicija",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Šaltinis",0,Source,true,SourceSClass);
  if (StandardHansa==false) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Surink. data",0,PickingDate,false,PasteCurDate);
  MatCol(t,-390,"Surink. laik.",0,PickingTime,false,PasteCurTime);
  MatCol(t,-320,"Pakr. data",0,InloadingDate,true,PasteCurDate);
  MatCol(t,-230,"Pakr. laikas",0,InloadingTime,true,PasteCurTime);
  MatCol(t,-160,"Iškr. data",0,DespatchRowDate,true,PasteCurDate);
  MatCol(t,-70,"Iškr. laikas",0,DespatchRowTime,true,PasteCurTime);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Atsi. data",0,PickingDate,false,PasteCurDate);
  MatCol(t,-390,"Atsi. laikas",0,PickingTime,false,PasteCurTime);
  MatCol(t,-320,"Pakr. data",0,InloadingDate,true,PasteCurDate);
  MatCol(t,-230,"Pakr. laikas",0,InloadingTime,true,PasteCurTime);
  MatCol(t,-160,"Siunt. data",0,DespatchRowDate,true,PasteCurDate);
  MatCol(t,-70,"Siunt. laikas",0,DespatchRowTime,true,PasteCurTime);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Vnt.",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vnt. egz. kaina",0,UnitFactPrice,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-315,"Vienetas",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Vieneto kiekis",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Plotis",0,UnitXval,true,0);
  MatCol(t,-160,"Aukštis",0,UnitYval,true,0);
  MatCol(t,-120,"Gylis",0,UnitZval,true,0);
  MatCol(t,-80,"Vieneto kaina",0,UnitFactPrice,true,0);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės paieška",'I','I',0,"ItemStatusORDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Ankstesnė pardavimo kaina",' ',' ',0,"ORLastSPrsm");
  end;
  RowMenuItem(0,"Pridėti antraštės eilutę",' ',' ',0,"ORAddHeaderLine");
  RowMenuItem(0,"Pridėti paslėptą liniją",' ',' ',0,"ORAddHidLine");
  RowMenuItem(0,"Pridėti tarpinę sumą",' ',' ',0,"SubtotalORDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Vadovo nuolaid. pakeitimas",' ',' ',0,"MgrsDiscOverrideORDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  if (StandardHansa==false) then begin
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,8,"H");
  end;
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
  EditField(h,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
  EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Siuntimo term.",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Sintimo būdas",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Maršrutas",Normal,Sorting,false,DelRouteSClass);
  end;
  EditField(h1,v+=vs,80,"Patalpa",Normal,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Filialas",Normal,BranchID,false,AllCUSClass);
  end;
  EditField(h2,v=vm,80,"Viso kiekis",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Viso svoris",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Viso tūris",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Frachtas",Normal,FrPrice,true,0);
  EditField(h2,v+=vs,80,"Intrastat kodas",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);
  if (StandardHansa==false) then begin
    EditField(h3,v,80,"Frahto PVM kd.",Normal,FrVATCode,true,VATCodeSClass);
  end;
  CheckBox(473,v=vm,0,"Faktūros prieš siuntimą",InvBeforeShip);
  CheckBox(473,v+=16,0,"Nust. prist. kiekį į 0",SHShipSetToZero);
  Tile(5,130,false,"5",PriceList);
    h3 = 530;
  EditField(h1,v=vm,80,"Kainoraštis",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Nuolaidų lentelė",ViewOnly,RebCode,false,0);
//  EditField(h2,v+=vs,80,"Disc %",ViewOnly,DiscPerc,false,0);
//  EditField(h2,v+=vs,80,"Disc Amnt",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Faktūra kam",Normal,InvoiceToCode,false,CUSClass);
  if (StandardHansa==false) then begin
  EditField(h1,v+=vs,80,"Kreditinė kortelė",Normal,CreditCard,false,CreditCardSClass);
  EditField(h1,v+=vs,80,"Autorizacija",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,-20,"Komentaras",Normal,Comment,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment4,false,0);
  v = vm;
  if (HasSalesGroup) then begin
    EditField(h2,v,80,"Pardav. grupė",Normal,SalesGroup,false,SalesGroupSClass);
    v = v + vs;
  end;
  EditField(h2,v,80,"Kalba",Normal,LangCode,false,LangSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Komisiniai",Normal,Commision,true,0);
    EditField(h2,v+=vs,80,"Viso įtr. komisinius",ViewOnly,SumIncCom,true,0);
  end;
  if (HasTREO) then begin
    EditField(h3,v=vm,80,"TREO nr.",Normal,TREONr,false,0);
  EditField(h3,v+=vs,80,"TREO galioj. data",Normal,TREOExpDate,false,PasteCurDate);
  end;
  Tile(6,250,false,"6",Addr1);
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Invoice"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Adresas"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Šalis",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h2-89,v,232,"",ViewOnly,InvCountryName,false,0);
    h5 = -170;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  EditField(h5,v,width,"Faktūra",Normal,BankCode,false,BankSClass);
  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=(vm+=40),123,"Patvirtinimo būsena",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*
		ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Patvirtinimo būklė");
		RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujama",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėta",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nereikalauta",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Laukiama",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
		RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmesta",AcceptanceStatus);
*/
    v = VATZoneButtonsLabelslit(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelslit(h3=290,v=vm+20,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Regionas",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"PVM Reg. Nr.",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);
  EditField(h2,v+=vs,150,"Telefonas",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Faksas",Normal,Fax,false,0);
  Tile(7,170,false,"7",ShipAddr0);
  if (StandardHansa==false) then begin
  EditField(h1,v=6,80,"Adreso kd.",Normal,DelAddrCode,false,DelAddr3SClass);
  EditField(h1,v+=vs,-20,"Siuntimas",Normal,ShipAddr0,false,0);
  end else begin
    EditField(h1,v=6,-20,"Siuntimas",Normal,ShipAddr0,false,0);
  end;
  EditField(h1,v+=vs,-20,"Adresas",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Šalis",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0);
    h5 = -170;
    width = -20;
  end;
  EditField(h2,v,150,"Siuntimo GLN",ViewOnly,DelRecipientGLN,false,0);
//  EditField(h1+200,v,80,"#VAT Code#",Normal,CustVATCode,false,0);
  EnterSkip(OrdDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Užsakymo būklė",'r',5,"ORInfoRnORDsm");
    SpecialMenu("Prekės būklė",'I',2,"ItemStatusORDsm");
    SpecialMenu("Sukurti Siuntimą",'L',0,"SHFromORDsm");
    SpecialMenu("Sukurti faktūrą",'F',1,"IVFromORDsm");
    SpecialMenu("Pridėti tarp. sumą",' ',14,"SubtotalORDsm");
/*
email not working yet
    SpecialMenu("Create E-Mail",'m',11,"CreateMailFromORDsm");
*/
  end else begin
  SpecialMenu("Perskaičiuoti nuolaidą",' ',11,"RecalcDiscountORDsm");
  if (StandardHansa==false) then begin
  SpecialMenu("Perskaičiuoti svorį ir tūrį",' ',10,"RecalculateWeightORDsm");
  end;
  if (HasLocalization("USA")) then begin
    SpecialMenu("Gauti mokesčių vertes",' ',0,"ORGetTaxRatesDsm");
  end;

  SpecialMenu("Atnaujinti valiutinių kainoraščių prekes",' ',7,"UpdatePricesORDsm");
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  SpecialMenu("Užsakymo būklė",'r',5,"ORInfoRnORDsm");
  if (HasTaxMatrix) then begin
    SpecialMenu("Atidaryti mok. matricą",' ',25,"OpenVatMatrixORDsm");
  end;
  if (StandardHansa==false) then begin
  	SpecialMenu("Spausdinti vidinį užsakymą",' ',4,"Or2FormORDsm");
  end;
  SpecialMenu("Rezervacijos",' ',15,"OrderReservORDsm");
  if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Parašas",' ',10,"SignORDsm");
  end;

  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
//  SpecialMenu("Sukurti veiklą",'c',9,"CreateActFromORDsm");
  SpecialMenu("Sukurti siuntimą",'L',0,"SHFromORDsm");
  if (HasDownpayments) then begin
  SpecialMenu("Sukurti išankstinio apmok. faktūrą",' ',3,"DownPayFromORDsm");
  end;
  if (HaseMail) then begin
  	SpecialMenu("Sukurti el. laišką",'m',11,"CreateMailFromORDsm");
	end;
  SpecialMenu("Sukurti faktūrą",'F',1,"IVFromORDsm");
  if (HasModTS or IsEnterprise) then begin
    SpecialMenu("Sukurti projektą",' ',9,"CreatePRFromORDsm");
    SpecialMenu("Sukurti projekto biudžetą",' ',10,"CreateTBBUFromORDsm");
  end;
  SpecialMenu("Sukurti pirkimo užsakymą",' ',4,"POFromORDsm");
  SpecialMenu("Sukurti grąžinimą",'B',6,"RetFromORsm");
  SpecialMenu("Sukurti sandėlio perkėlimą",' ',8,"StockMovFromORDsm");
  if (HasApprovals) then begin
    SpecialMenu("Patvirtinimo užklausa",' ',6,"ORSendforAcceptanceORDsm");
    SpecialMenu("Atšaukti patvirtinimo užklausą",' ',2,"CancelApprovalRequestDsm");
  end;
  SpecialMenu("Pridėti pirkėją",' ',0,"AddCustomerORDsm");
  SpecialMenu("Pridėti prekę",' ',0,"AddItemORDsm");
  end;
  EndWindow;
end;

window INDClass:8
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer tilenr;
  real h,h1,h2,h3,h4,h5,h6,v,vm,vs;
  string 255 label;
  record CYBlock CYb;

  BlockLoad(CYb);
  WindowBegin("Prekė",INDClass,CGview,-);
  SetWRect(20,80,830,400);
  Sizeable(-1,-1,-1,0);
  DynamicWindow;
  UseView(INVc);
  if (GuiType==kGuiAndroid) then begin
    ToolBar;
    PushButton(-110,5,-10,25,ToolImagePicker,"Paveiksliukas");
    EndToolBar;
  end;

  if (HasJewelleryInterface) then begin
    Tile(0,107,false,"",Code);
  end else begin
  Tile(0,87,false,"",Code);
  end;
  v = 6; vs = 20; h = 155; h1 = 300; h2 = 385; h3 = 395; h4 = 285; h5 = 433;
  EditField(h,v, 150,"Nr.",Normal,Code,false,0);
  EditField(h2,v,80,"Grupė",Normal,Group,false,ITSClass);
  EditField(h,v+=vs,-40,"Aprašymas",Normal,Name,false,0);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,150,"Alternatyvus kodas",Normal,AlternativeCode,false,0);
  end;
  tilenr = 1;
  TileButton(tilenr,"Kainos"); tilenr = tilenr + 1;
  if (HasJewelleryInterface) then begin
    TileButton(tilenr,"Jewellery"); tilenr = tilenr + 1;
    TileButton(tilenr,"Watch"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Atsargos"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
  TileButton(tilenr,"Sandėlis"); tilenr = tilenr + 1;
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  TileButton(tilenr,"Savikaina"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Gamyba"); tilenr = tilenr + 1;
  TileButton(tilenr,"Sąsk."); tilenr = tilenr + 1;
  if (GuiType==kGuiiPhone) then begin
    TileButton(tilenr,"Paveiksliukas"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Įvairovės"); tilenr = tilenr + 1;
  TileButton(tilenr,"Tekstas"); tilenr = tilenr + 1;
  TileButton(tilenr,"Savik. sk."); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
  TileButton(tilenr,"Vart. laukai"); tilenr = tilenr + 1;
  end;
    TileButton(tilenr,"Žinutės"); tilenr = tilenr + 1;
  if (HasCharts) then begin
  TileButton(tilenr,"BI"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  CheckBox(h,v+=vs,0,"Uždaryta",Terminated);
  CheckBox(h2,v,0,"Neparduodama",NotForSales);
  Tile(tilenr,209,false,tilenr,Unittext); tilenr = tilenr + 1;
  EditField(h,v=6 ,100,"Vienetas",Normal,Unittext,false,UnitSClass);
  if (HasJewelleryInterface) and (UserCanAction("ViewCostPrice",true)) then begin
    EditField(h,v+=vs,100,"Cost Price",Normal,InPrice,true,0);
  end;
  EditField(h,v+=vs,100,"Kaina",Normal,UPrice1,true,0);
  EditField(h,v+=vs,100,"Kainos pasikeitimas",ViewOnly,LastBasePriceChange,true,0);
  EditField(h,v+=vs,100,"Kainos faktorius",Normal,PriceFactor,true,0);
  EditField(h,v+=vs,100, "Prekės formulė",Normal,CalcPrice,false,CPMSClass);
  EditField(h,v+=vs,100,"Antkainio %",Normal,Markup,true,0);
  EditField(h,v+=vs,100,"Premijos %",Normal,Bonus,true,0);
  EditField(h,v+=vs,-240,"Objektai",Normal,Objects,false,ObjSClass);
  if (HasItemClassification) then begin
  EditField(h,v+=vs,-240,"Klasės",Normal,DispGroups,false,DISClass);
  end;
  if (StandardHansa==false) then begin
  ButtonFrame(h1,v=24,120,4,"Prekės tipas");
  end else begin
    ButtonFrame(h1,v=24,120,3,"Prekės tipas");
  end;
  RadioButton(h1,v,kItemTypePlain,0,"Paprasta",ItemType);
  RadioButton(h1,v+=16,kItemTypeStocked,0,"Sandėliuojama",ItemType);
  RadioButton(h1,v+=16,kItemTypeStructured,0,"Struktūrinė",ItemType);
  if (StandardHansa==false) then begin
  RadioButton(h1,v+=16,kItemTypeService,0,"Paslauga",ItemType);
  end;
  EndFrame;

  Pict_Field(-205,8,-35,178,"");
  if (GuiType==kGuiCocoa) then begin
    PushButton(-160,182,-80,202,ToolImagePicker,"Pridėti pav.");
  end;
  if (StandardHansa==false) then begin
  CheckBox(h1,v+=32,0,"Prekė - projekto medžiaga",ItemMaterial);
  end;
  if (HasJewelleryInterface) then begin
    Tile(tilenr,110,false,tilenr,Metal); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Metal",Normal,Metal,false,0);
    EditField(h,v+=vs, 140,"Weight",Normal,RowWeight,false,0);
    EditField(h,v+=vs, 140,"Size",Normal,Size,false,0);
    EditField(h,v+=vs, 140,"Length",Normal,Length,false,0);
    EditField(h,v+=vs, 140,"Reference",Normal,Reference,false,0);
    v = 6;
    EditField(h5,v, 140,"Major Stone Detail",Normal,MajStoneDet,false,0);
    EditField(h5,v+=vs, 140,"Colour",Normal,Colour,false,0);
    EditField(h5,v+=vs, 140,"Clarity",Normal,Clarity,false,0);
    EditField(h5,v+=vs, 140,"Certificate",Normal,Cert,false,0);
    EditField(h5,v+=vs, 140,"Minor Stone Detail",Normal,MinStoneDet,false,0);
    Tile(tilenr,90,false,tilenr,WatchBrand); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Watch Brand",Normal,WatchBrand,false,0);
    EditField(h,v+=vs, 140,"Style Name",Normal,StyleName,false,0);
    EditField(h,v+=vs, 140,"Watch Metal",Normal,WatchMetal,false,0);
    EditField(h,v+=vs, 140,"Movement",Normal,Movement,false,0);
    v = 6;
    EditField(h5,v, 140,"Bracelet/Strap",Normal,BrcStr,false,0);
    EditField(h5,v+=vs, 140,"Gender",Normal,Gender,false,0);
    EditField(h5,v+=vs, 140,"Other",Normal,Other,false,0);
    EditField(h5,v+=vs, 140,"Other2",Normal,Other2,false,0);
  end;
  Tile(tilenr,170,false,tilenr,MinLevel);  tilenr = tilenr + 1; // Need to clean this Tile up!
  v = 6;
  vm = v;
  ButtonFrame(h1,v+=24,143,3,"Serijinio nr. kontrolė");
  RadioButton(h1,v,0,0,"Nėra",SerNrf);
  RadioButton(h1,v+=16,1,0,"Vnt.",SerNrf);
  RadioButton(h1,v+=16,2,0,"Siuntos",SerNrf);
    CheckBox(h1+200,v,0,"Nereikalauti siuntos nr. POS faktūrose",DonotRequireBatchNrOnIVCash);
  EditField(h,v=6,100,"Min. lygis",Normal,MinLevel,true,0);
  EditField(h,v+=vs,100,"Maks. lygis",Normal,MaxLevel,true,0);
  EditField(h,v+=vs  ,100,"Skyrius",Normal,Department,false,DepSClass);
  EditField(h,v+=vs  ,100,"Lentynos kodas",Normal,InvCode,false,0);
  EditField(h,v+=vs,100,"Šaltinis, nenur. kitaip",Normal,DefaultSource,false,SourceSClass);
  EditField(h5,v ,50,"Aplinkos aps. mokestis/kg.",Normal,RepaPricePerWeight,true,0);
  EditField(h6=650,v ,80,"Pagrindinis Užsk. tipas",Normal,DefOrderType,false,SetSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Rizikos lygis",Normal,HazLevCode,false,HazLevSClass);
    EditField(h5,v ,50,"Alkoholio %",Normal,AlcPrc,true,0);
    if (HasLocalization("PRT")) then begin
      EditField(h6,v, 80,"Atsargų prek. tipas",Normal,StockItemType,false,SetSClass);
    end;
  end;
  EditField(h,v+=vs ,100,"Vnt. 2",Normal,Unittext2,false,UnitSClass);
  EditField(h5,v ,50,"Konversija 1",Normal,Conversion1,true,0);
  EditField(h,v+=vs,100,"Vnt. koeficientas",Normal,UnitCoefficient,true,0);
  EditField(h5,v ,50,"Konversija 2",Normal,Conversion2,true,0);
  if (StandardHansa==true) then begin
    EditField(h,v+=vs ,50,"Prekės plotis",Normal,Width,true,0);
    EditField(h4,v ,50,"Aukštis",Normal,Height,true,0);
    EditField(h5,v ,50,"Gylis",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Prekės tūris",Normal,Volume,true,0);
    EditField(h4,v ,50,"Tankumas",Normal,Density,true,0);
    EditField(h5,v ,50,"Svoris",Normal,Weight,true,0);
  end;
  if (StandardHansa==false) then begin
  Tile(tilenr,170,false,tilenr,LocArea);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6) ,100,"Pagrindinė paletės prekė",Normal,DefPalletItem,true,INSClass);
  EditField(h5,v ,80,"Pakrovimo sritis",Normal,PickArea,false,LocAreaSClass);
  EditField(h,v+=vs ,100,"Pagr. patalpos sritis",Normal,LocArea,false,LocAreaSClass);
  EditField(h5,v ,50,"Palečių pakrov. srityje",Normal,PalletsInPickArea,true,0);
  EditField(h,v+=vs ,50,"Maks. kiekis paletėje",Normal,QtyonPallet,true,0);
  EditField(h4,v ,50,"Paletės sl.",Normal,PalletLayers,true,0);
  EditField(h5,v ,50,"Pakuotės kiekis",Normal,QtyonPalletLayer,true,0); //EBS edit field label
  EditField(h,v+=vs ,50,"Pal. plotis",Normal,PalletWidth,true,0);
  EditField(h4,v ,50,"Pal. aukštis",Normal,PalletHeight,true,0);
  EditField(h5,v ,50,"Pal. gylis",Normal,PalletDepth,true,0);
  EditField(h,v+=vs ,50,"Viet. plotis",Normal,DefPosWidth,true,0);
  EditField(h4,v ,50,"Viet. aukštis",Normal,DefPosHeight,true,0);
  EditField(h5,v ,50,"Viet. gylis",Normal,DefPosDepth,true,0);
  EditField(h,v+=vs ,50,"Plotis",Normal,Width,true,0);
  EditField(h4,v ,50,"Aukštis",Normal,Height,true,0);
  EditField(h5,v ,50,"Gylis",Normal,Depth,true,0);
  EditField(h,v+=vs ,50,"Tūris",Normal,Volume,true,0);
  EditField(h4,v ,50,"Tankis",Normal,Density,true,0);
  EditField(h5,v ,50,"Neto svoris",Normal,NetWeight,true,0);
  EditField(h5,v+=vs ,50,"Svoris",Normal,Weight,true,0);
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  Tile(tilenr,190,false,tilenr,InPrice);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6),100,"Savikaina",Normal,InPrice,true,0);
  if (StandardHansa==false) then begin
  EditField(h5,v,70,"Savik. pasikeitimas",ViewOnly,LastPriceChange,true,0);
  end else begin
    EditField(h3,v,70,"Savik. pasikeitimas",ViewOnly,LastPriceChange,true,0);
  end;
  if (StandardHansa==false) then begin
  EditField(h,v+=vs ,100,"Savik. bazine val. 2",Normal,InPriceB2,true,0);
  ButtonFrame(h1,v+=24,200,4,"Savik. atnaujinimas po gavimo");
  end else begin
    ButtonFrame(h1,v+=40,210,4,"Savik. atnaujinimas po gavimo");
  end;
  RadioButton(h1,v,0,0,"Nėra",UpdateCost);
  RadioButton(h1,v+=16,1,0,"Paskutinio pirkimo kaštai(su pap. kašt.)",UpdateCost);
  RadioButton(h1,v+=16,2,0,"Svertinis vidurkis",UpdateCost);
  RadioButton(h1,v+=16,3,0,"Paskutinio pirkimo kaštai(be pap. kašt.)",UpdateCost);
  ButtonFrame(h5=540,v=v-3*16,200,3,"Atnaujinti savik. Sand. perkainavimuose");
  RadioButton(h5,v,0,0,"Neatnaujinti",SRUpdateCost);
  RadioButton(h5,v+=16,1,0,"Paskutinio perkainavimo savik.",SRUpdateCost);
  RadioButton(h5,v+=16,2,0,"Svert. vidurkis",SRUpdateCost);
  if (StandardHansa==false) then begin
  EditField(h,v=vm+2*vs,100,"Papildomi kaštai",Normal,ExtraCost,true,0);
  end else begin
    EditField(h,v=vm+vs,100,"Papildomi kaštai",Normal,ExtraCost,true,0);
  end;
  EditField(h,v+=vs ,100,"Svertinis vid.",Normal,WeighedAvPrice,true,0);
  if (StandardHansa==false) then begin
  EditField(h,v+=vs ,100,"Svertinis vid. bazine val. 2",Normal,WeighedAvPriceB2,true,0);
  end;
  EditField(h,v+=vs ,100,"Pask. pirkimo kaštai(su pap. kašt.)",Normal,LastPurchPrice,true,0);
  EditField(h,v+=vs ,100,"Pask. pirkimo kaina(be. pap. kašt.)",Normal,LastPurchPrice2,true,0);
  EditField(h,v+=vs ,100,"Pask. pirkimo val.",Normal,LastPurchCurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,100,"Fiksuotas frachtas",Normal,FixedFreight,true,0);
  CheckBox(h1,v,0,"Įtraukti fiksuotą prekės frachtą",InclItemFreight);
  CheckBox(h5,v,0,"Turi akcizą",HasExcise);
  end;
  Tile(tilenr,170,false,tilenr,Recepy);  tilenr = tilenr + 1;
  EditField(h,v=6 ,120,"Ruošinys",Normal,Recepy,false,RecSClass);
  CheckBox(h1,v,0,"Rodyti komponentus dokumentuose",ExplodeRec); // "Show components on documents" is better English but VERY confusing
  EditField(h,v+=vs ,120,"Faktūros ruošinys",Normal,InvRecepy,false,RecSClass);
  EditField(h2,v,150,"Brūkšn. kodas",Normal,BarCode,false,0);
  EditField(h,v+=vs ,120,"Kontrakto prekė",Normal,ContractItem,false,INSClass);
  EditField(h2,v,150,"Nomenklatūros kod.",Normal,EUCodex,false,CommoditySClass);
  v = v + vs;
  if (StandardHansa==false) then begin
    EditField(h,v,120,"Nuomos faktūravimas",Normal,RentalItem,false,INSClass);
  end;
  EditField(h2,v,150,"ECN kodas",Normal,EKNCode,false,0); // i think it is same as Commodity Code
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,150,"Produktų ir paslaugų klasės",Normal,CPSCode,false,0);
  end;
  EditField(h,v+=vs ,120,"Garantija mėn.",Normal,WarrantyLength,true,0);
  EditField(h2,v,150,"Spalva",Normal,colnr,false,SetSClass);
  EditField(h,v+=vs,120,"Rūšiav, kodas",Normal,SortCode,true,0);
  EditField(h,v+=vs,-40,"Alt. kodas",Normal,AlternativeCode,false,0);
  EditField(h,v+=vs,-40,"Perspėjimas",Normal,WarnText1,false,0);
  Tile(tilenr,170,false,tilenr,SalesAcc);  tilenr = tilenr + 1;
  v = 6;
  vm = v;
  EditField(h,vm,55,"Vietinė pard. sąsk.",Normal,SalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,VATZoneNameLIT & "Pardavimų sąsk.",Normal,EUSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Ne ES pard. sąsk.",Normal,ExpSalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  EditField(h,v+=vs,55,"Pasl. fakt. pard sąsk.",Normal,SVOInvbleSalesAcc,false,AccSClass);
  // EditField(h,v+=vs,55,"Pasl. garant. pard. sąsk.",Normal,SVOWarrantySalesAcc,false,AccSClass);
  // EditField(h,v+=vs,55,"Pasl. sut. pard. sąsk.",Normal,SVOContractSalesAcc,false,AccSClass);
  // EditField(h,v+=vs,55,"Pasl. Goodwill pard sąsk.",Normal,SVOGoodwillSalesAcc,false,AccSClass);//?
  end;
  EditField(h,v+=vs,55,"Komponentų panaudojimas",Normal,CompUsage,false,AccSClass);
  EditField(h,v+=vs,55,"Proj. medžiagų pan. sąsk.",Normal,ProjMaterialsUsageAcc,false,AccSClass);

  EditField(h2=360,v=vm,55,"Viet. savik. sąsk.",Normal,CostAcc,false,AccSClass);
 EditField(h2,v+=vs,55,VATZoneNameLIT & "Savikainos sąsk.",Normal,EUCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Ne ES savik. sąsk.",Normal,ExpCostAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  EditField(h2,v+=vs,55,"Pasl. fakt. savik. sąsk.",Normal,SVOInvbleCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Pasl. garant. savik. sąsk.",Normal,SVOWarrantyCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Pasl. sut. savik. sąsk.",Normal,SVOContractCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Pasl. Goodwill savik. sąsk.",Normal,SVOGoodwillCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Viešb. WIP sąsk.",Normal,HotelWIPAcc,false,AccSClass);
  end;
  EditField(h2=540,v=vm,20,"Viet. PVM kd.",Normal,VATCode,false,VATCodeSClass);
  EditField(h2,v+=vs,20,VATZoneEditFieldLabelLIT(1) & "PVM kodas",Normal,VATCodeEU,false,VATCodeSClass);
  EditField(h2,v+=vs,20,"Ne ES PVM kd.",Normal,VATCodeExp,false,VATCodeSClass);
  if (HasExtTax) then begin
  CheckBox(h2,v+=20,0,"Skaičiuoti percepc.mokesčius",Perceptions);
  end;
  if (StandardHansa==false) then begin
    if (HasWithholdingTax) then begin
   CheckBox(h2,v+=16,0,"Skaičiuoti sulaikymo mokesčius",Withholdings);
    end;
    if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  EditField(h2=670,v=vm,50,"Viet. mok. šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
    EditField(h2,v+=vs,50,VATZoneEditFieldLabelLIT(1) & "Mok. šabl.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
  EditField(h2,v+=vs,50,"Eksp. mok. šabl.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
    end;
    if (HasLocalization("GBR,LTU,POL")) then begin
      EditField(h2=680,v=vm,20,"Reversinis PVM kodas",Normal,RvrsVATCode,false,VATCodeSClass);
    end;
  end;
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin
    Tile(tilenr,70,false,tilenr,-);  tilenr = tilenr + 1;
    AttachmentDisplay(10,10,200,200);
//    PushButton(30,10,-80,40,ToolImagePicker,"Take picture");
//    ControlLabel(0,0,0,0,"Take picture","SystemFont",17,kTextStyleBold,AdjCenter,patM4ReportsTextBlue);
  end;
  Tile(tilenr,70,false,tilenr,VARMask);  tilenr = tilenr + 1;
  EditField(h,v=6,-40,"Įvairovių šablonas",Normal,VARMask,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Ataskaitos eilė",Normal,VARRepOrder,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Poaibiai",Normal,VARSubsets,false,VARSubsetsSClass);
  Tile(tilenr,120,true,tilenr,Math);  tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-32,-40,-,99);
  MatCol(1,24,"Kalba",0,LangCode,false,LangSClass);
  MatCol(1,94,"Tekstas",0,Text,false,0);
  EndMatrix;
  Tile(tilenr,220,false,tilenr,CostPerc);  tilenr = tilenr + 1;
  ButtonFrame(h=100,vm=(v=20),230,6,"Pirminis savikainos modelis");
  RadioButton(h,v,0,0,"Pagal nutylėjimą",PrimaryCostModel);
  RadioButton(h,v+=16,1,0,"Įsigijimo kaina",PrimaryCostModel);
  RadioButton(h,v+=16,2,0,"% _nuo bazinės kainos",PrimaryCostModel);
  EditField(h+150,v,55,"%",Normal,CostPerc,true,0);
  RadioButton(h,v+=16,3,0,"Svertinis vidurkis",PrimaryCostModel);
  RadioButton(h,v+=16,4,0,"Eilė",PrimaryCostModel);
  RadioButton(h,v+=16,kCostModelNoneItem,0,"Jokio",PrimaryCostModel);
  ButtonFrame(h,v+=40,230,3,"Eilės savikainos modelis");
  RadioButton(h,v,0,0,"Pagal nutylėjimą",QueuedCostModel);
  RadioButton(h,v+=16,1,0,"F_IFO",QueuedCostModel);
  RadioButton(h,v+=16,2,0,"LIFO",QueuedCostModel);

  ButtonFrame(h2=380,v=vm,200,3,"Savikaina serijiniams nr.");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",FIFOPerSerialNr);
  RadioButton(h2,v+=16,1,0,"Savikaina ne serijiniams nr.",FIFOPerSerialNr);
  RadioButton(h2,v+=16,2,0,"Savikaina serijiniams nr.",FIFOPerSerialNr);
  ButtonFrame(h2,v+=40,200,3,"Eilės modelis pagal patalpą");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",FIFOPerLocation);
  RadioButton(h2,v+=16,1,0,"Eilė ne pagal patalpą",FIFOPerLocation);
  RadioButton(h2,v+=16,2,0,"Eilė pagal patalpą",FIFOPerLocation);
  ButtonFrame(h2,v+=40,200,3,"Svertinis vid. pagal patalpą");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",WAPerLocation);
  RadioButton(h2,v+=16,1,0,"Svert. vid. ne pagal patalpą",WAPerLocation);
  RadioButton(h2,v+=16,2,0,"Svert. vid. pagal patalpą",WAPerLocation);
/*5.3
  ButtonFrame(h2,v+=40,200,3,"Savikaina patalpai");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",CostPricePerLocation);
  RadioButton(h2,v+=16,1,0,"Savikaina ne pagal patalpą",CostPricePerLocation);
  RadioButton(h2,v+=16,2,0,"Savikaina patalpai",CostPricePerLocation);
*/
  if (StandardHansa==false) then begin
    Tile(tilenr,240,false,tilenr,-); tilenr = tilenr + 1;
  h = 180; v = 6;
  label = UserDefined("INVc","UserStr1");
  if (nonblank(label)) then begin
    EditField(h,v=6 ,-40,label,Normal,UserStr1,false,0);
  end;
  label = UserDefined("INVc","UserStr2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr2,false,0);
  end;
  label = UserDefined("INVc","UserStr3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr3,false,0);
  end;
  label = UserDefined("INVc","UserStr4");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr4,false,0);
  end;
  label = UserDefined("INVc","UserStr5");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr5,false,0);
  end;
  label = UserDefined("INVc","UserVal1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal1,true,0);
  end;
  label = UserDefined("INVc","UserVal2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal2,true,0);
  end;
  label = UserDefined("INVc","UserVal3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal3,true,0);
  end;
  label = UserDefined("INVc","UserDate1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate1,true,PasteCurDate);
  end;
  label = UserDefined("INVc","UserDate2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate2,true,PasteCurDate);
  end;
  label = UserDefined("INVc","UserDate3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate3,true,PasteCurDate);
  end;
  end;
  Tile(tilenr,400,false,tilenr,Math2); tilenr = tilenr + 1;
  StaticText(50,v=20,"Žinutė",true);
  TextField(60,v-5,-20,370,Math2,0);
  if (HasCharts) then begin
    Tile(tilenr,400,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$INDCLass_BIChart");
  end;
  if (UserCanReport("INInfoRn","",true)) then begin
  SpecialMenu("Prekės būklės ataskaita",'I',0,"INStatusINDsm");
  end;
//  SpecMenuItem("Perskaičiuoti kainoraštį",' ',2);
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin
  SpecialMenu("Prekės istorija",'h',3,"INrsRn_INSm");//CMD H DOES HIDE HANSA
  end;
  SpecialMenu("Prekės patalpoje būklė",' ',4,"LocItemStatDsm");
  if (HasJewelleryInterface) and (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Item Status per Alternative Code",'S',5,"ItemStatusAltINDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Sukurti perkamą prek",' ',1,"PIFromINDsm");
  SpecialMenu("Sukurti ruošinį",' ',2,"RecFromINDsm");
  EndWindow;
end;

window INLClass:3
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real pos;
  Integer rn;

  WindowBegin("Prekės",INLClass,CGmlist,-);
  SpawnClass(INDClass);
  SetWRect(64,80,609,298);
  Sizeable(-1,-1,0,0);
  UseView(INVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,    "Nr.",Code,false,Code);
  pos = 111;
  if (HasItemGroups) then begin
    RlColKey(pos,pos,"Grupė",Group,false,Group);
    pos = 181;
  end;
  if (HasModIN) then begin
    RlColKey(pos,pos,"Aprašymas",Name,false,Name);
  end else begin
    RlColKey(pos,pos,"Pavadinimas",Name,false,Name);
  end;
  if (IsEnterprise) then begin
    // RlColKey(-150,-150,"Alt. kodas",AlternativeCode,false,AlternativeCode); //EBS
    RlColKey(-150,-150,"Muit. kodas",EUCodex,false,EUCodex); //EBS
  end;
  if (HasModIN) then begin
    RlCol(-70,-70,"Bazinė kaina",UPrice1,true);
  end else begin
    RlCol(-70,-70,"Kaina",UPrice1,true);
  end;
  SearchField("Ieškoti");
  if (GuiType==kGuiMetro) then begin
    RowMenuBegin("");
    if (HasModIN) then begin
      if (UserCanReport("INInfoRn","",true)) then begin
        RowMenuItem(0,"Prekės būklės ataskaita",'I','I',4315,"OKIVLsm");
      end;
      RowMenuItem(0,"Prekės būklė",' ',' ',4315,"ItemStatusINLsm");
    end;
    if (HasModIN) then begin
      if (UserCanReport("INrsRn","INrsRClass",true)) then begin
        RowMenuItem(0,"Prekės istorija",'h','h',4315,"INHistINLsm");
      end;
    end;
    if (HasJewelleryInterface) then begin
      RowMenuItem(0,"Prekės būklė alternatyviam kodui",'I','I',4315,"ItemStatusAltINLsm");
    end;
    EndRowMenu;
    SpecMenuGroup("",kSpecMenuGroupTypeButtonsInBottomBarRight,0);
    SpecialMenuWithIcon("Ieškoti",'F',4313,2,"INSearchLsm");
  end else begin
    if (HasModIN) then begin
      if (UserCanReport("INInfoRn","",true)) then begin
        SpecialMenu("Prekės būklės ataskaita",'i',0,"INStatusINLsm");
      end;
      SpecialMenu("Prekės būklė",'I',1,"ItemStatusINLsm");
    end;
    if (HasModIN) then begin
      if (UserCanReport("INrsRn","INrsRClass",true)) then begin
        SpecialMenu("Prekės istorija",'h',2,"INHistINLsm");
      end;
    end;
    SpecialMenu("Ieškoti",'F',2,"INSearchLsm");
    if (HasJewelleryInterface) then begin
      SpecialMenu("Prekės būklė alternatyviam kodui",'I',5,"ItemStatusAltINLsm");
    end;
  end;
  EndWindow;
end;

window VIDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  record CYBlock CYb;
  string 255 label;
  Integer tilenr;
  Integer f,flipnr;
  Integer pos;

  WindowBegin("Pirkimo faktūros",VIDClass,CGview,-);
  SetWRect(20,80,750,460);
  if (IsEnterprise==false) and (HasModNL==false) then begin
  end else begin
  Sizeable(-1,-1,0,0);
  end;
  UseView(VIVc);
//  FormName(PrintVID);
  ActiveFieldOnNew("VECode");
  if (IsEnterprise==false) then begin
    if (IsBooks and IsStandardProduct==false) then begin
      AutoSizeWindow(false);
    end;
    v = 6; h = 90; h2 = 260; h3 = 460; h4=-120; vs = 20;
    if (HasVATZone or ((HasMultiCurrency or HasBase2) and (HasModNL))) then begin
      Tile(0,74,false,"",VECode);
    end;
    if (HasNumberSeries) then begin
      EditField(h,v,80,"Nr.",Normal,SerNr,false,TSerSClass);
    end else begin
      EditField(h,v,80,"Nr.",Normal,SerNr,false,0);
    end;
    EditField(h2,v,-40,"Name",Normal,VEName,false,0);

    EditField(h,vm=(v+=20),80,"Tiekėjas",Normal,VECode,false,VESClass);
    EditField(h2,v,80,"Faktūros data",Normal,InvDate,false,PasteCurDate);
    CheckBox(-80,v,0,"OK",OKFlag);
    if (HasModNL) then begin
      EditField(h3,v,-100,"Nuoroda",Normal,RefStr,false,0);
    end;
    if (HasVATZone) then begin
      tilenr = 1;
      TileButton(tilenr,"Terminai"); tilenr = tilenr + 1;
      TileButton(tilenr,"Savikaina"); tilenr = tilenr + 1;
      if (HasMultiCurrency or HasBase2) then begin
        TileButton(tilenr,"Valiutos"); tilenr = tilenr + 1;
      end;
      TileButton(tilenr,"Įvarūs"); tilenr = tilenr + 1;
      tilenr = 1;
      Tile(tilenr,100,false,tilenr,InvoiceNr); tilenr = tilenr + 1;
      v = 6;
    end else begin
      if (HasMultiCurrency or HasBase2) and (HasModNL) then begin
        tilenr = 1;
        TileButton(tilenr,"Terminai"); tilenr = tilenr + 1;
        TileButton(tilenr,"Savikaina"); tilenr = tilenr + 1;
        TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1;
        tilenr = 1;
        Tile(tilenr,100,false,tilenr,InvoiceNr); tilenr = tilenr + 1;
        v = 6;
      end else begin
        v = v + vs;
      end;
    end;
    vm = v;
    EditField(h,v,80,"Tiek. fak. nr.",Normal,InvoiceNr,false,0);
    EditField(h,v+=vs,80,"VISO",Normal,PayVal,true,0);
    EditField(h,v+=vs,80,"PVM",Normal,VATVal,true,0);
    EditField(h2,v=vm,22,"Mok. sąl.",Normal,PayDeal,false,PDSClass);
    if (HasModNL) then begin
    	EditField(h2,v+=vs,80,"Op. data",Normal,TransDate,false,PasteCurDate);
    end;
    EnterSkip(Math);
    EditField(h2,v+=vs,80,"Apmok. data",Normal,DueDate,false,PasteCurDate);
    v = vm;
    EditField(h3,v,90,"Faktūros kred.",Normal,CredInv,false,APSClass);
    if (HasLanguages) then begin
      EditField(h4,v,80,"Kalba",Normal,LangCode,false,LangSClass);
    end;
    EditField(h3,v+=vs,90,"Trumpieji kodai",Normal,SortCode,false,0);
    if (HasObjects) then begin
      EditField(h4,v,80,"Objektai",Normal,Objects,false,ObjSClass);
    end;
    EditField(h3,v+=vs,-40,"Banko sąskaita",Normal,BankAcc,false,0);
    if (HasLocalization("POL")) then begin
      EditField(h2,v+=vs,80,"Service Del. Date",Normal,ServiceDelDate,false,PasteCurDate);
    end;
    EditField(h2,v+=vs,-40,"Komentaras",Normal,Comment,false,0);
    if (HasModNL or HasModTS) then begin
      if (HasVATZone or HasMultiCurrency or HasBase2) then begin
        Tile(tilenr,330,true,tilenr,Math); tilenr = tilenr + 1;
        v = 6;
      end else begin
        v = v + 2*vs;
      end;
      BlockLoad(CYb);
      if (HasAdvancedStock or HasModTS or HasModPO) then begin
        MatrixBegin(10,v,-50,-32,-,99);
      end else begin
        MatrixBegin(10,v,-27,-32,-,99);
      end;
      MatTypedRow(stp);
      MatOverStrike(ovst);
      flipnr = 0;
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kInvoiceRowTypeNormal,24,"Sąskaita",0,AccNumber,false,AccSClass);
      Flip(flipnr); flipnr = flipnr + 1;
      if (HasObjects) then begin
        MatCol(t=kInvoiceRowTypeNormal,90,"Objektai",0,Objects,false,ObjSClass);
        MatCol(t,180,"Aprašymas",0,Comment,false,0);
    end else begin
        MatCol(t,90,"Aprašymas",0,Comment,false,0);
      end;
      MatCol(t,-130,"Suma",0,Sum,true,0);
      if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
        MatCol(t,-35,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
      end else begin
        MatCol(t,-35,"PVM kd.",0,VATCode,false,VATCodeSClass);
      end;

      MatText(t=kInvoiceRowTypePrepayment,24,"Avanso numeris",true);
      MatCol(t,208,"",0,PrepayNr,false,APPay3SClass);
      MatCol(t,-266,"",0,Comment,false,0);
      MatCol(t,-160,"",0,PrepayAmount,true,0);/* Price holds the #VAT# sum, Recipe holds the date of prepaym. */
      MatCol(t,-70,"",0,VATVal,true,0);

      MatText(t=kInvoiceRowTypeEmployee,24,"Sumokėti darbuotojui",true);
      MatCol(t,208,"",0,UserCode,false,UserSClass);
      MatCol(t,-406,"",0,AccNumber,false,0);
      MatCol(t,-306,"",0,Objects,false,0);
      MatCol(t,-206,"",0,Comment,false,0);

      if (HasAdvancedStock or HasModTS or HasModPO) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        pos = 140;
        t = kInvoiceRowTypeNormal;
        if (HasAdvancedStock) then begin
          MatCol(t,pos,"Užsk. tipas",0,OrderType,false,0);
          MatCol(t,-360,"Sand. tipas",0,StockType,false,SetSClass);
        end else begin
          MatCol(t=1,pos,"Aprašymas",0,Comment,false,0);
        end;
        MatCol(t,-260,"Suma",0,Sum,true,0);
        MatCol(t,-190,"Prekė",0,Item,false,INSClass);
        MatCol(t,-130,"Kiekis",0,qty,true,0);
        if (HasModTS) then begin
          MatCol(t,-100,"Projektas",0,PRCode,false,PRSClass);
        end;
        if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
          MatCol(t,-30,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
        end else begin
          MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
        end;
        MatText(3,270,"",true);
      end;
      InsertRowTest;
      DeleteRowTest;
      RowMenuBegin("");
      RowMenuItem(0,"Balansuoti",'=','=',0,"BalanceVIDsm");
      EndRowMenu;
      EndMatrix;
      vs = 20;
//      v = 18;//canoot be set to 18 on windows
      if (flipnr>2) then begin
        for (f=1;f<flipnr;f=f+1) begin
          VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
          v = v + vs;
        end;
      end;
      EditField(-140,-20,-40,"Skaičiuoti PVM",ViewOnly,CalcVATVal,true,0);
      if (HasMultiCurrency or HasBase2) then begin
        Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
        h1 = h + 20;
        v = 6;
        EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
        if (HasMultiCurrency) then begin
          if (HasBase2) then begin
            EditField(h1,v+vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
          end else begin
            EditField(h1,v+vs,50,"Bazinė valiuta",Normal,BaseRate1,true,0);
          end;
          if (HasBase2) then begin
            EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
          end;
          EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
          if (HasBase2) then begin
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
            RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
          end else begin
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);
          end;
        end else begin
          EditField(h1,v+=vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
          EditField(h1,v+=vs,50,"Baz. val. 2",Normal,BaseRate2,true,0);
        end;
      end;
      if (HasVATZone) then begin
        Tile(tilenr,120,false,tilenr,InvoiceNr); tilenr = tilenr + 1;
        v = 20;
        v = VATZoneButtonsLabelslit(h,v,170,16);
      end;
      SpecialMenu("Balansuoti",'=',0,"BalanceVIDsm");
      SpecialMenu("Pirkimų faktūros būklė",'r',2,"VIInfoVIDsm");
      if (HasIntegratedNL) then begin
        SpecialMenu("Atidaryti D/K operacijas",'t',5,"OpenTRFromVI");
      end;
      if ((HasRussianPrepayment or HasPrepayments) and HasModPL) then begin
        SpecialMenu("Susieti su išankstiniu apmokėjimu",' ',6,"ConnectToPrepayVIDsm");
      end;
    end else begin
      if (HasMultiCurrency or HasBase2) then begin
        EditField(h,v+=vs,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
        if (HasMultiCurrency) then begin
          if (HasBase2) then begin
            EditField(h,v+vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
          end else begin
            EditField(h,v+vs,50,"Baz. val.",Normal,BaseRate1,true,0);
          end;
          if (HasBase2) then begin
            EditField(h,v+(vs*2),50,"Baz. Val. 2",Normal,BaseRate2,true,0);
          end;
          EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
          if (HasBase2) then begin
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
            RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
          end else begin
            RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);
          end;
        end else begin
          EditField(h,v+=vs,50,"Baz. Val. 1",Normal,BaseRate1,true,0);
          EditField(h,v+=vs,50,"Baz. Val. 2",Normal,BaseRate2,true,0);
        end;
      end;
    SpecialMenu("Faktūros būklė",'r',2,"VIInfoVIDsm");
    if (HasIntegratedNL) then begin
      SpecialMenu("Atidaryti D/K operaciją",'t',5,"OpenTRFromVI");
    end;
    if ((HasRussianPrepayment or HasPrepayments) and HasModPL) then begin
      SpecialMenu("Prijungti prie išankstinio",' ',6,"ConnectToPrepayVIDsm");
      end;
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    SpecialMenu("Sukurti kredito pažymą",' ',15,"CreateCreditNoteVIDsm");
    if (HasModCL) then begin
      SpecialMenu("Sukurti kasos išlaidas",' ',8,"DoCLOutFromVID");
    end;
    if (HasModNL and HasMultiCurrency) then begin
      SpecialMenu("Vidinė sąskaita",' ',12,"IntIVFromVIDsm");
    end;
    if (HasLocalization("POL") and HasVATZone) then begin
      SpecialMenu("Sukurti vidinę faktūrą",' ',12,"IntIVFromVIDsm");
    end;
    if (HasLocalization("HRV,POL,RUS,SLV,SVN,SRB,UKR")) and (HasIntegratedNL) then begin
      SpecialMenu("Sukurti PVM koregavimą pirkim. kn.",' ',9,"VATCorrectionVIsm");
    end;
    SpecialMenu("Pridėti tiekėją",' ',0,"AddSupplierVIDsm");
  end else begin
    BlockLoad(CYb);
    vs = 20;
  Tile(0,94,false,"",InvDate);
    if (IsEnterprise) then begin
      h = 75; h2 = 260; h3 = 530;
    end else begin
      h = 90; h1 = 90; h2 = 270; h3 = 470; h4=-110;
    end;
    if (HasNumberSeries) then begin
      EditField(h,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
    end else begin
      EditField(h,vm=(v=6),95,"Nr.",Normal,SerNr,false,0);
    end;
  EditField(h,v+=vs,95,"Tiekėjas",Normal,VECode,false,VESClass);
  EnterSkip(PayVal);
  EditField(h2,v=vm,-40,"Pavadinimas",Normal,VEName,false,0);
    if (IsEnterprise) then begin
  EditField(h2,vm=(v+=20),95,"Sulaik. suma",Normal,HoldSum,true,0);
    end else begin
      EditField(h2,v+=vs,80,"Faktūros data",Normal,InvDate,false,PasteCurDate);
      EditField(h3,v,90,"Nuoroda",Normal,RefStr,false,0);
    end;
  CheckBox(h4=-100,v,0,"OK",OKFlag);
    if (IsEnterprise) then begin
  EditField(h,v+=vs,95,"Viso",Normal,PayVal,true,0);
  EditField(h2,v,95,"PVM",Normal,VATVal,true,0);
    end;
    tilenr = 1;
    TileButton(tilenr,"Terminai"); tilenr = tilenr + 1;
    TileButton(tilenr,"Kaštai"); tilenr = tilenr + 1;
    TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1;
    if (IsEnterprise) then begin
      if (HasLocalization("UKR")) then begin
      TileButton(tilenr,"PVM kursas"); tilenr = tilenr + 1;
      end;
      TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1;
      TileButton(tilenr,"Sąskaitos"); tilenr = tilenr + 1;
      TileButton(tilenr,"Fakt. adresas"); tilenr = tilenr + 1;
    end;
    tilenr = 1;
    Tile(tilenr,90,false,tilenr,InvDate); tilenr = tilenr + 1;
    if (IsEnterprise) then begin
			vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
			EditField(h1,vm=(v=6),82,"Fakt. data",Normal,InvDate,false,PasteCurDate);
			EditField(h1,v+=vs,25,"Mok. terminas",Normal,PayDeal,false,PDSClass);//PDSClass
			EditField(h1,v+=vs,82,"Operacijos data",Normal,TransDate,false,PasteCurDate);
			EditField(h1,v+=vs,82,"Apmokėti iki",Normal,DueDate,false,0);
      if (HasLocalization("POL")) then begin
        EditField(h1,v+=vs,82,"Service Del. Date",Normal,ServiceDelDate,false,PasteCurDate);
      end;
    end else begin
      EditField(h,v=6,80,"Tiek. fakt. nr.",Normal,InvoiceNr,false,0);
      EditField(h,v+=vs,80,"VISO",Normal,PayVal,true,0);
      EnterSkip(PayDeal);
      EditField(h,v+=vs,80,"PVM",Normal,VATVal,true,0);
    end;
    if (IsEnterprise) then begin
  EditField(h2,v=vm,135,"Tiek. fakt. nr.",Normal,InvoiceNr,false,0);
  EditField(h2,v+=vs,135,"Pasirašo",Normal,OKPersons,false,UserSClass);
  EditField(h2,v+=vs,135,"Objektai",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Nuoroda",Normal,RefStr,false,0);
    end else begin
      EditField(h2,v=6,22,"Mok. sąl.",Normal,PayDeal,false,PDSClass);
      EnterSkip(Math);
      EditField(h2,v+=vs,80,"Op. data",Normal,TransDate,false,PasteCurDate);
      EditField(h2,v+=vs,80,"Apmok. data",Normal,DueDate,false,0);
    end;
    if (IsEnterprise) then begin
  EditField(h3,v=vm,82,"Gavimo data",Normal,RcvDate,false,PasteCurDate);
  EditField(h3,v+=vs,82,"Nuol. data",Normal,RebDate,false,PasteCurDate);
  EditField(h3,v+=vs,82,"Nuolaida",Normal,RebVal,true,0);
  EditField(h3,v+=vs,82,"Faktūros kreditas",Normal,CredInv,false,APSClass);
    end else begin
      EditField(h3,v=6,90,"Faktūros kreditas",Normal,CredInv,false,APSClass);
      EditField(h3,v+=vs,90,"Banko sąskaita",Normal,BankAcc,false,0);
      EditField(h3,v+=vs,90,"Trumpas kodas",Normal,SortCode,false,0);
      v = 6;
      if (HasLanguages) then begin
        EditField(h4,v,90,"Kalba",Normal,LangCode,false,LangSClass);
        v = v + vs;
      end;
      if (HasObjects) then begin
        EditField(h4,v,90,"Objektai",Normal,Objects,false,ObjSClass);
        v = v + vs;
      end;
    end;
  EnterSkip(Math);
    if (HasAdvancedAccounting) then begin
  CheckBox(h4,v=6,0,"Sulaikyti",Closed);
      if (StandardHansa==false) then begin
  CheckBox(h4,v+=16,0,"Prel. Užsak.",PrelBook);
      end;
    end;
    EditField(h4+60,v+=(vs+4),30,"Siunt. sąl.",Normal,ShipDeal,false,ShipDealSClass); //EBS
    EditField(h4+60,v+=vs,30,"Siunt. būd.",Normal,ShipMode,false,DMSClass); //EBS
    Tile(tilenr,130,true,tilenr,Math); tilenr = tilenr + 1;
  EditField(140,-21,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasWithholdingTax) then begin
      if (StandardHansa==false) then begin
  EditField(270,-20,70,"Su. mok.",Normal,WithHoldingTax,true,0);
      end;
    end;
    if (HasExtTax) then begin
  EditField(410,-20,70,"Be. mok.",ViewOnly,TAX1Sum,true,0);
    end;
  EditField(-120,-20,70,"Skaičiuoti PVM",ViewOnly,CalcVATVal,true,0);
//  SoftEditField(-144,-21,70,"Subtotal",ViewOnly,"NettVal",true,0,M4Val,255);
  EnterSkip(Math);
//  CheckBox(20,-21,0,"OK",OKFlag);
  h=4;
    if (HasModNL) then begin
    if (IsEnterprise) then begin
  MatrixBegin(h,v=24,-50,-24,-,299);
    end else begin
      MatrixBegin(h,v=24,-27,-24,-,99);
    end;
  MatTypedRow(stp); //??
  MatOverStrike(ovst);
    flipnr = 0;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kInvoiceRowTypeNormal,32,"Sąsk.",0,AccNumber,false,AccSClass);
    if (HasObjects) then begin
      MatCol(t,90,"Objektai",0,Objects,false,ObjSClass);
    end;
  MatText(t=6,32,"Išankstinio numeris",true);
      MatCol(t,208,"",0,PrepayNr,false,APPay3SClass);
      MatCol(t,-266,"",0,Comment,false,0);
  MatCol(t,-160,"",0,PrepayAmount,true,0);/* Price holds the VAT sum, Recipe holds the date of prepaym. */
  MatCol(t,-70,"",0,VATVal,true,0);

  MatText(t=kInvoiceRowTypeEmployee,32,"Sumokėti darbuotojui",true);
  MatCol(t,158,"",0,UserCode,false,UserSClass);
  MatCol(t,-406,"",0,AccNumber,false,0);
  MatCol(t,-306,"",0,Objects,false,0);
  MatCol(t,-206,"",0,Comment,false,0);

  MatText(t=kInvoiceRowTypeDownpayment,32,"Avansas",true);
  MatColTL(t,122,"",0,-1,ViewOnly,0,Item,true,0);
  MatColTL(t,208,"",0,-1,ViewOnly,0,qty,true,0);
  MatCol(t,268,"",0,Comment,false,0);
//      MatColTL(t,-240,"",0,-1,ViewOnly,0,Price,true,0);
//      MatColTL(t,-180,"",0,-1,ViewOnly,0,vRebate,true,0);
  MatColTL(t,-170,"",0,-1,Normal,0,Sum,true,0);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
    MatCol(t,-100,"",0,AccNumber,false,AccSClass);
    MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-90,"",0,AccNumber,false,AccSClass);
    MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  end;

    MatText(t=kInvoiceRowTypeRetention,32,"Mokėjimo atidėjimas",true);
  MatCol(t,100,"",0,Comment,false,0);
      if (HasModTS) then begin
  MatCol(t,-340,"Projektas",0,PRCode,false,PRSClass);
      end;
  MatCol(t,-210,"Sąskaita",0,AccNumber,false,AccSClass);
  MatCol(t,-110,"Suma",0,Sum,true,0);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  MatCol(t,-30,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  MatText(t=kInvoiceRowTypeWithholdingTax,32,"Sulaikymo mok.",true);
  MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
  MatCol(t,172,"",0,AccNumber,false,AccSClass);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,392,"",0,Comment,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
      t = 1; pos = 180;
      if (HasAdvancedAccounting) then begin
        MatCol(t,pos,"Trumpas",0,ACShort,false,ACShortSClass);
        pos = pos + 60;
      end;
      MatCol(t,pos,"Aprašymas",0,Comment,false,0);
  MatCol(t,-120,"Suma",0,Sum,true,0);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  MatCol(t,-30,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  //  MatCol(t,-30,"TT",0,TaxTemplateCode,false,VATCodeSClass);
      if (HasAdvancedStock or HasModTS or HasModPO) then begin
      Flip(flipnr); flipnr = flipnr + 1;
        pos = 140;
        t=1;
        if (HasAdvancedStock) then begin
          MatCol(t,pos,"Užsakymo tipas",0,OrderType,false,0);
          MatCol(t,-360,"Sandėlio tipas",0,StockType,false,SetSClass);
        end else begin
          MatCol(t=1,pos,"Aprašymas",0,Comment,false,0);
        end;
  MatCol(t,-260,"Suma",0,Sum,true,0);
  MatCol(t,-190,"Prekė",0,Item,false,INSClass);
  MatCol(t,-130,"Kiekis",0,qty,true,0);
        if (HasModTS) then begin
  MatCol(t,-100,"Projektas",0,PRCode,false,PRSClass);
        end;
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  MatCol(t,-30,"Mok. kd.",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(t,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  MatText(3,270,"",true);
      end;
      if (HasSimAccruals) then begin
      Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=kInvoiceRowTypeNormal,140,"Aprašymas",0,Comment,false,0);
  MatCol(t,-260,"Suma",0,Sum,true,0);
  MatCol(t,-180,"Sukaupta",0,PeriodCode,false,AutSimPerSClass);
  MatCol(t,-80,"PVM",0,VATVal,true,0);
      end;
      if (HasAdvancedStock or HasSerialNumbers) then begin
      Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=kInvoiceRowTypeNormal,140,"Aprašymas",0,Comment,false,0);
  MatCol(t,-350,"Prekė",0,Item,false,INSClass);
        if (HasSerialNumbers) then begin
  MatColTL(t,-250,"Serij. nr.",0,-1,ViewOnly,-1,SerialNr,false,0);
        end;
  MatCol(t,-130,"Kiekis",0,qty,true,0);
        if (HasAdvancedStock) then begin
  MatColTL(t,-70,"Kainos pokytis",0,-1,ViewOnly,-1,VarianceAmount,false,0);
        end;
      end;
      if (HasModAT2) then begin
      Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=kInvoiceRowTypeNormal,140,"Aprašymas",0,Comment,false,0);
  MatCol(t,-300,"Inventorinis Nr.",0,InventoryNr,false,AT2UnitSClass);
  MatCol(t,-150,"Turto oper. tipas",0,AssetTransType,false,SetSClass);
    end;
      InsertRowTest;
      DeleteRowTest;
//      RowMenuBegin("");
//      EndRowMenu;
      EndMatrix;
  vs = 20;
    v = 18;
    if (flipnr>2) then begin
      for (f=1;f<flipnr;f=f+1) begin
        VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
        v = v + vs;
        end;
      end;
    end;

    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
  vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
  EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
    if (HasBase2) then begin
        EditField(h1,v+vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
    end else begin
        EditField(h1,v+vs,50,"Baz. valiuta",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
        EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
      if (HasBase2) then begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);
      end;
    end else begin
      EditField(h1,v+=vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Baz. val. 2",Normal,BaseRate2,true,0);
    end;
    if (IsEnterprise) then begin
      if (HasLocalization("SVK,UKR")) then begin
      Tile(tilenr,70,false,tilenr,VATFrRate); tilenr = tilenr + 1;
  vs = 20;
        EditField(h=110,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
        EditField(h,v+vs,50,"Baz. val. 1",Normal,VATBaseRate1,true,0);
        EditField(h,v+(vs*2),50,"Baz. val. 2",Normal,VATBaseRate2,true,0);
        EditField(h2=295,v,50,"#PVM# kursas",Normal,VATFrRate,true,0);
        RateField(h3=360,v,50,":",Normal,"VATToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
        RateField(h3,v+=vs,50,":",Normal,"VATToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
      end;
      Tile(tilenr,110,false,tilenr,PRCode); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 550; h4 = -100;
      if (StandardHansa==false) then begin
  EditField(h1,v=vm,82,"Faktoringas",Normal,VEFactoring,false,VESClass);
        EditField(h1,v+=vs,82,"Filialas",ViewOnly,BranchID,false,0);
      end else begin
        EditField(h1,v=vm,82,"Filialas",ViewOnly,BranchID,false,0);
      end;
  EditField(h1,v+=vs,82,"Tiek. Val. Suma",Normal,SupCurVal,false,0);
  EditField(h1,v+=20,82,"Statist. vertė",Normal,StatVal,true,0);
  EditField(h1,v+=vs,-20,"Komentaras",Normal,Comment,false,0);
  EditField(h2,v=vm,80,"Pardavėjas",Normal,SalesMan,false,UserSClass);
      if (HasSalesGroup) then begin
  EditField(h2,v+=vs,80,"Pard. grupė",Normal,SalesGroup,false,SalesGroupSClass);
    EditField(h2+160,v,80,"Org. Tiek.",ViewOnly,OrgVE,false,0);
      end;
  EditField(h2,v+=vs,80,"Kalba",Normal,LangCode,false,LangSClass);
  EditField(h2,v+=vs,80,"Kredit. sąsk.",Normal,APAcc,false,AccSClass);
  CheckBox(h3,v=6,0,"Tiek. info. operac.",APonTR);
      if (HasLocalization("PRT")==false) then begin
        CheckBox(h3,v+=16,0,"Self Billing",SelfBilling);
      end;
      CheckBox(h3,v+=16,0,"Siųsti mokėj. PVM",OPBookVAT);
      if (HasLocalization("ARG")) then begin
        CheckBox(h3,v+=16,0,"Fiskalinė sąskaita",FiscalFlag);
      end;
      Tile(tilenr,90,false,tilenr,POSerNr); tilenr = tilenr + 1;
  EditField(h1,v=vm,82,"P/Užsak. Nr.",ViewOnly,POSerNr,false,0);
      if (StandardHansa==false) then begin
  EditField(h1,v+=vs,82,"P/U Proceso Nr.",Normal,POCQStatNr,false,POCQStatSClass);
  EditField(h1,v+=vs,82,"Pasl. Siunt. Data",Normal,ServiceDelDate,false,PasteCurDate);
        if (HasLocalization("ARG")) then begin
  EditField(h1,v+=vs,82,"CAE galiojimas",Normal,CAEExpiry,false,PasteCurDate);
        end;
      end;
  EditField(h2,v=vm,135,"Banko kd.",Normal,BankCode,false,BankSClass);
  EditField(h2,v+=vs,135,"Banko sąsk.",Normal,BankAcc,false,VEBankAccSClass);
  EditField(h2,v+=vs,135,"Trump. kd.",Normal,SortCode,false,0);
      if (HasLocalization("ARG")) then begin
        EditField(h2,v+=vs,135,"CAE",Normal,CAE,false,0);
      end;
      v = vm;
      if (HasLocalization("ARG,BOL")) then begin
        EditField(h3,v,-20,"Tax Authority ID",Normal,TaxAuthID,false,0);
        EditField(h3,v+=vs,-20,"Valdymo kodas",Normal,TaxAuthIDCC,false,0);
      end;
      EditField(h3,v+=vs,-20,"Barkodas",Normal,BarCode,false,0);
      EditField(h3,v+=vs,-20,"Mok. kodas",Normal,PaymentCode,false,PaymentCodeSClass);
  /*
  EditField(h2,v,30,"Sup. VAT-Code",Normal,VEVatCode,false,VATCodeSClass);
  EditField(h3,v,80,"Official Ser. No.",Normal,OfficialSerNr,false,0);
*/
      Tile(tilenr,250,false,tilenr,Addr1); tilenr = tilenr + 1;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Faktūra"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Adresas"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Šalis",Normal,InvCountry,false,CountrySClass);
      if (HasApprovals) then begin
        SoftEditField(h3=h+4,v=(vm+=40),123,"Patvirtinimo statusas",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*
  ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalauta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nereikalaujama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Laukiama",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtinta",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmesta",AcceptanceStatus);
*/
        v = VATZoneButtonsLabelslit(h3=290,v=vm,170,16);
      end else begin
        v = VATZoneButtonsLabelslit(h3=290,v=vm+20,170,16);
      end;
  EditField(h2=-170,v=vm,150,"Regionas",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"PVM Reg. Nr.",Normal,VATNr,false,0);
      if (HasLocalization("HRV,SVN")) then begin
      EditField(h2,v+=vs,50,"Legali forma",ViewOnly,VELegalForm,false,0);
      end;
  EditField(h2,v+=vs,150,"Telefonas",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Faksas",Normal,Fax,false,0);
    end;
  SpecialMenu("Subalansuoti",'=',0,"BalanceVIDsm");
    if (HasModNL) then begin
  SpecialMenu("Faktūros būklė",'r',2,"VIInfoVIDsm");
    end;
    if (HasModTS) then begin
  SpecialMenu("Pridėti išskaitymus",' ',25,"RetentionLineVIDsm");
    end;
    if (HasWithholdingTax) then begin
  SpecialMenu("Pridėti sulaikymo mokestį",' ',26,"WithholdingLineVIDsm");
    end;
    if (HasEInvoicing) then begin
  SpecialMenu("Atidaryti E-Pirkimo faktūros pdf",' ',13,"OpenVEIVPDFDsm");
    end;
    if (HasIntegratedNL) then begin
  SpecialMenu("Atidaryti D/K operaciją",'t',5,"OpenTRFromVI");
    end;
    if (HasAdvancedAccounting) then begin
  SpecialMenu("Atidaryti pleminarią DK oper.",' ',13,"OpenTRFromVI2");
    end;
    if ((HasRussianPrepayment or HasPrepayments) and HasModPL) then begin
  SpecialMenu("Prijungti prie išankstinio",' ',6,"ConnectToPrepayVIDsm");
  end;
	if (HasModIN and HasAdvancedAccounting) then begin
		if (StandardHansa==false) then begin
			SpecialMenu("Nesuderintas POS",' ',11,"PUNotReconVIDsm");
		end;
		SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
	end;
  if (HasTaxMatrix) then begin
    SpecialMenu("Atidaryti mokesčių matricą",' ',25,"OpenVatMatrixVIDsm");
  end;
		if (HasModCL) then begin
			SpecialMenu("Spausdinti kasos pajamas/išlaidas",' ',3,"PrintCashInOutVIDsm");
    end;
    if (HasApprovals) then begin
      SpecialMenu("Patvirtinimo užklausa",' ',6,"VISendforAcceptanceVIDsm");
      SpecialMenu("Atšaukti patvirtinimo užklausą",' ',2,"CancelApprovalRequestDsm");
		end;
		SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModCRM) then begin
//  		SpecialMenu("Sukurti veiklą",'c',4,"ActFromVIDsm");
    end;
    if (HasModAT2) then begin
  		SpecialMenu("Sukurti turtą ",' ',7,"CreateAT2FromVI");
    end;
    if (HasModCL) then begin
  		SpecialMenu("Sukurti išmokėjimą",' ',8,"DoCLOutFromVID");
  	end;
  	SpecialMenu("Sukurti kredito pažymą",' ',15,"CreateCreditNoteVIDsm");
    if ((HasModNL and HasMultiCurrency) and (StandardHansa==false)) then begin
  		SpecialMenu("Sukurti vidin faktūrą",' ',12,"IntIVFromVIDsm");
    end;
    if (HasLocalization("UKR")) then begin
  		SpecialMenu("Sukurti First Event",' ',10,"FirstEventVIDsm");
    end;
    if (HasLocalization("HRV,POL,RUS,SLV,SVN,SRB,UKR")) and (HasIntegratedNL) then begin
  		SpecialMenu("PVM koregavimas pirk. kn.",' ',9,"VATCorrectionVIsm");
    end;
  end;
  EndWindow;
end;

window PUDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  string 255 label;
  record CYBlock CYb;
  Integer tilenr;
  Integer f,flipnr,rn;

  BlockLoad(CYb);
  WindowBegin("Gavimas",PUDClass,CGview,-);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,870,620);
  end else begin
    SetWRect(20,80,750,620);
  end;
  if (HasMultiCurrency or IsEnterprise or HasObjects) then begin
  Sizeable(-1,-1,0,0);
  end;
  UseView(PUVc);
  ActiveFieldOnNew("VECode");
  FormName(PurchaseForm);
  Tile(0,74,false,"",TransDate);
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Tiekėjas",Normal,VECode,false,VESClass);
    EnterSkip(TransDate);
  EditField(h=255,v=vm,-40,"Pavadinimas",Normal,VEName,false,0);
  CheckBox(h4=-100,v+=20,0,"OK",OKFlag);
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    CheckBox(h4,v+=16,0,"Kaina su #PVM#",InclVAT);
  end else begin
    CheckBox(h4,v+=16,0,"Kaina su mok.",InclVAT);
  end;
  tilenr = 1;
  TileButton(tilenr,"Sąlygos"); tilenr = tilenr + 1;
  TileButton(tilenr,"Prekės"); tilenr = tilenr + 1;
  if (HasMultiCurrency) then begin
    TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1;
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
    TileButton(tilenr,"Papild. kaštai"); tilenr = tilenr + 1;
    TileButton(tilenr,"Frachtas"); tilenr = tilenr + 1;
    end;
    TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1;
  end;
  tilenr = 1;

  vs = 20; h1 = 110; h2 = 300; h3 = 550; h4 = -100;
  Tile(tilenr,70,false,tilenr,TransDate); tilenr = tilenr + 1;
  EditField(h1,vm=(v=6),82,"Operac. data",Normal,TransDate,false,PasteCurDate);
  if (IsEnterprise==false) then begin
    EditField(h2,v,-20,"Komentaras",Normal,Comment,false,0);
  end;
  if (HasMultiLocations) then begin
    v = v + vs;
    EditField(h1,v,82,"Patalpa",Normal,Location,false,LocationSClass);
  end;
  if (HasRoute) then begin
    v = v + vs;
    EditField(h1,v,82,"Maršrutas",ViewOnly,Sorting,false,0);
  end;
  v = v + vs;
  SoftEditField(h1,v,82,"Skanuoti barkodą",Normal,"scanbarcode",false,0,M4Str,60);
  if (HasObjects) then begin
    if (IsEnterprise) then begin
  EditField(h2,v=vm,135,"Objektai",Normal,Objects,false,ObjSClass);
    end else begin
      if (HasMultiLocations) then begin
        EditField(h2,v,135,"Objektai",Normal,Objects,false,ObjSClass);
      end else begin
        v = v + vs;
        EditField(h2,v,135,"Objektai",Normal,Objects,false,ObjSClass);
      end;
    end;
  end;
  if (HasModPO) then begin
    if (HasObjects) then begin
      v = v + vs;
    end;
    EditField(h2,v,135,"Pirk. Užsk. nr.",ViewOnly,PONr,false,0);
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      v = v + vs;
      EditField(h2,v,135,"Pirk. kontr.",ViewOnly,POCOSerNr,true,POCOSClass);
    end;
  EditField(h3,v=vm,80,"Pirk. Užsk. klasė",ViewOnly,PUClass,false,0);
  end;
  if (HasLanguages) then begin
    v = v + vs;
    EditField(h3,v,80,"Kalba",Normal,LangCode,false,LangSClass);
  end;
  if (IsEnterprise) then begin
    v = v + vs;
    EditField(h3,v,80,"Pirkėjo numeris",Normal,CustomsNr,false,0);
  end;
  if (HasLocalization("ARG,MEX,USA")) then begin
    v = v + vs;
    EditField(h3,v,80,"Dispatch Number",Normal,DispatchNumber,false,0);
  end;
//  CheckBox(h4,v=vm,0,"Price Incl. #VAT#",InclVAT);
  EnterSkip(Math);
  Tile(tilenr,220,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  if (HasSerialNumbers or HasLocalization("ARG,MEX,USA") or HasJewelleryInterface) then begin
    MatrixBegin(4,v,-50,-50,-,200);
  end else begin
    MatrixBegin(4,v,-25,-50,-,200);
  end;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(1,28,"Prekė",0,ArtCode,false,INSClass);
//  MatCol(1,84,"Var",0,VARList,true,VARSClass);
//  MatCol(1,144,"Kiekis",0,Quant,true,0);
  if (HasVarieties) then begin
  MatCol(1,94,"Kiekis",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,94,"Kiekis",0,Quant,true,0);
  end;
  EnterSkip(Spec);
  MatText(t=3,28,"Parašas",true);
  MatCol(t,100,"",0,Sign,false,0);
  MatText(t,160,"Pataisymo data",true);
  MatCol(t,290,"Atn. data",0,UpdDate,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasJewelleryInterface) then begin
    MatColTL(1,144,"Vnt.",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
    MatCol(1,184,"Aprašymas",0,Spec,false,0);
    MatCol(1,-485,"Patalpa",0,Location,false,LocationSClass);
    MatCol(1,-430,"Ser. Nr.",0,SerialNr,false,SerialNrSClass);
    MatCol(1,-320,"Sand. tipas",0,StockType,false,SetSClass);
  end else begin
  MatColTL(1,164,"Vnt.",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
  MatCol(1,204,"Aprašymas",0,Spec,false,0);
  end;
  MatCol(1,-240,"Vnt. kaina",0,UPrice,true,0);
  MatCol(1,-160,"Savikaina",0,CostPrice,true,0);
  MatCol(1,-80,"Suma",0,Sum,true,0);
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
  MatCol(1,-350,"Patalpa",0,Location,false,LocationSClass);
  MatCol(1,-280,"Serijinis nr.",0,SerialNr,false,SerialNrSClass);
  MatCol(1,-150,"Galioja iki",0,BestBefore,false,0);
  MatCol(1,-60,"Siunt.būklė",0,BatchStatus,false,BatchStatusSClass);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
  MatColTL(1,-404,"Kaštai",0,-1,ViewOnly,-1,InPrice,false,0);
    if (StandardHansa==false) then begin
  MatColTL(1,-324,"Kainos pokytis",0,-1,ViewOnly,-1,VarianceAmount,false,0);
  MatCol(1,-244,"Vnt. kaina",0,UPrice,true,0);
  MatCol(1,-174,"Pap. kaštai",0,Extra,true,0);
  MatCol(1,-104,"Savikaina",0,CostPrice,true,0);
    end else begin
      MatCol(1,-324,"Frachtas",0,ShipCost,true,0);
      MatCol(1,-244,"Pap. kaštai",0,Extra,true,0);
      MatCol(1,-164,"Muitai",0,CustomsCost,true,0);
    end;
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  MatCol(1,-34,"Mok-kd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
  MatCol(1,-34,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
    MatCol(1,-350,"Tiek. prekės nr.",0,VEItemCode,false,PISClass);
  MatColTL(1,-270,"Tiek. vnt.",0,M4Code,ViewOnly,5,VEUnit,false,UnitSCLass);
  MatCol(1,-200,"Tiek. kiekis",0,VEQuant,true,0);
    if (StandardHansa==false) then begin
  MatCol(1,-140,"Koeficientas",0,Coefficient,true,0);
    end;
  MatCol(1,-90,"Bazinė kaina",0,BasePrice,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
    if (StandardHansa==false) then begin
  MatCol(1,-400,"Sand. tipas",0,StockType,false,SetSClass);
    end;
    if (HasTREO) then begin
  MatCol(1,-310,"TREO",0,TREO,false,SetSClass);
    end;
  MatCol(1,-220,"Sand. sąsk.",0,CostAcc,false,AccSClass);
  MatCol(1,-155,"Pirk. sąsk.",0,CredAcc,false,AccSClass);
  MatCol(1,-90,"Objektai",0,Objects,false,ObjSClass);
    if (StandardHansa==false) then begin
    Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Muitinės nr.",0,CustomsNr,false,0);
      MatCol(1,-340,"Muitinės data ",0,CustomsDate,false,PasteCurDate);
  MatCol(1,-240,"Kilmės šalis",0,CountryOfOrg,false,CountrySClass);
  MatCol(1,-140,"Iš vietos",0,PosCode,false,PosSClass);
  MatCol(1,-70,"Į vietą",0,ToPosCode,false,FreePosSClass);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Aprašymas",0,Spec,false,0);
  MatCol(1,-300,"Nr.",0,SerialNr,false,SerialNrSClass); //EBS edit pos
  MatCol(1,-180,"Svoris",0,MeasWeight,true,0); //EBS
  MatCol(1,-135,"Plotis",0,UnitXval,true,0);
  MatCol(1,-90,"Aukštis",0,UnitYval,true,0);
  MatCol(1,-45,"Gylis",0,UnitZval,true,0);
    if (StandardHansa==false) then begin
  Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Papild. kaštai",0,Extra,true,0);
  MatCol(1,-420,"Frachtas",0,ShipCost,true,0);
  MatCol(1,-360,"Muitai",0,CustomsCost,true,0);
  label = UserDefined("AccBlock","PUCost1");
  if (blank(label)) then begin label = "Kaštai 1";end;
  MatCol(1,-300,label,0,RowCost1,false,0);
  label = UserDefined("AccBlock","PUCost2");
  if (blank(label)) then begin label = "Kaštai 2";end;
  MatCol(1,-240,label,0,RowCost2,false,0);
  label = UserDefined("AccBlock","PUCost3");
  if (blank(label)) then begin label = "Kaštai 3";end;
  MatCol(1,-180,label,0,RowCost3,false,0);
  label = UserDefined("AccBlock","PUCost4");
  if (blank(label)) then begin label = "Kaštai 4";end;
  MatCol(1,-120,label,0,RowCost4,false,0);
  label = UserDefined("AccBlock","PUCost5");
  if (blank(label)) then begin label = "Kaštai 5";end;
  MatCol(1,-60,label,0,RowCost5,false,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,144,"Pirk.už.nr.",0,PONr,false,POSClass);
  MatCol(1,194,"Pirk.už.eil.",0,OrdRow,false,0);
  MatCol(1,-370,"Pirk.už.persk.",0,PORecon,false,0);
  MatCol(1,-310,"Komentaras",0,POReconComment,false,0);
  MatCol(1,-200,"Fakt. persk.",0,VIRecon,false,0);
  MatCol(1,-130,"Komentaras",0,VIReconComment,false,0);
  end else begin
    if (HasSerialNumbers) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Aprašymas",0,Spec,false,0);
      MatCol(1,-150,"Serijinis Nr.",0,SerialNr,false,SerialNrSClass);
    end;
/*
    MatCol(1,-280,"Vnt. kaina",0,UPrice,true,0);
    MatCol(1,-210,"Frachtas",0,ShipCost,true,0);
    MatCol(1,-140,"Papild. kaštai",0,Extra,true,0);
    MatCol(1,-70,"Savikaina",0,CostPrice,true,0);
*/
  end;
  if (HasLocalization("ARG,MEX,USA")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Aprašymas",0,Spec,false,0);
    MatCol(t,-250,"Dispatch Number",0,DispatchNumber,false,0);
  end;
  if (HasJewelleryInterface) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Aprašymas",0,Spec,false,0);
    MatCol(t,-350,"Tiek. ser. nr.",0,SuppSerialNr,true,0);
    MatCol(t,-200,"Metal",0,Metal,true,0);
    MatCol(t,-150,"Weight",0,RowWeight,true,0);
    MatCol(t,-100,"Size",0,Size,true,0);
    MatCol(t,-50,"Length",0,Length,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Description",0,Spec,false,0);
    MatCol(t,-350,"Major Stone",0,MajStoneDet,true,0);
    MatCol(t,-250,"Colour",0,Colour,true,0);
    MatCol(t,-200,"Clarity",0,Clarity,true,0);
    MatCol(t,-150,"Cert",0,Cert,true,0);
    MatCol(t,-100,"Minor Stone",0,MinStoneDet,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Aprašymas",0,Spec,false,0);
    MatCol(t,-400,"Watch Brand",0,WatchBrand,true,0);
    MatCol(t,-300,"Style Name",0,StyleName,true,0);
    MatCol(t,-200,"Watch Metal",0,WatchMetal,true,0);
    MatCol(t,-100,"Movement",0,Movement,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Aprašymas",0,Spec,false,0);
    MatCol(t,-400,"Brc/Str",0,BrcStr,true,0);
    MatCol(t,-300,"Gender",0,Gender,true,0);
    MatCol(t,-200,"Other",0,Other,true,0);
    MatCol(t,-100,"Other 2",0,Other2,true,0);
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  if (StandardHansa==false) then begin
    if (HasSerialNumbers) then begin
      RowMenuItem(0,"Atidaryti siuntos specifikaciją",' ',' ',0,"OpenBatchPUDsm");
    end;
    RowMenuItem(0,"Padalinti eilut",' ',' ',0,"SplitRowPUDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
//  v = 18;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  EditField(110,-41,70,"Viso kiekis",ViewOnly,SumQuant,true,0);
//  EditField(110,-21,70,"Price Subtotal",Normal,SubTotal,true,0); //Shows the same as SumCostPrice?
  EditField(260,-41,70,"Frachtas",Normal,ShipCost,true,0);
  if (IsEnterprise) then begin
  EditField(260,-21,70,"Muitai",Normal,CustomsCost,true,0);
  end;
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    EditField(410,-41,70,"#PVM#",Normal,VATVal,true,0);
    if (HasExtTax) then begin
      EditField(410,-21,70,"Pap. kaštai",ViewOnly,TAX1Sum,true,0);
    end;
  end else begin
    EditField(410,-41,70,"Mok.",Normal,VATVal,true,0);
  end;
  EditField(-169,-41,118,"Tarp. suma",ViewOnly,SumCostPrice,true,0);
  EditField(-169,-21,118,"VISO",ViewOnly,PayVal,true,0);
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
  vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
  EditField(h1,v=6,50,"Valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
    if (HasBase2) then begin
        EditField(h1,v+vs,50,"Bazinė valiuta 1",Normal,BaseRate1,true,0);
    end else begin
        EditField(h1,v+vs,50,"Baz. val.",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
        EditField(h1,v+(vs*2),50,"Baz. val. 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Kursas",Normal,FrRate,true,0);
      if (HasBase2) then begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Baz. val.",false);
      end;
    end else begin
      EditField(h1,v+=vs,50,"Baz. val. 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Baz. val. 2",Normal,BaseRate2,true,0);
    end;
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    Tile(tilenr,120,false,tilenr,Cost1); tilenr = tilenr + 1;
  vs = 20;
  label = UserDefined("AccBlock","PUCost1");
  if (blank(label)) then begin label = "Papild. kaštai 1";end;
  EditField(h=110,v=6,70,label,Normal,Cost1,false,0);
  label = UserDefined("AccBlock","PUCost2");
  if (blank(label)) then begin label = "Papild. kaštai 2";end;
  EditField(h2=295,v,70,label,Normal,Cost2,false,0);
  label = UserDefined("AccBlock","PUCost3");
  if (blank(label)) then begin label = "Papild. kaštai 3";end;
  EditField(h,v+=vs,70,label,Normal,Cost3,false,0);
  label = UserDefined("AccBlock","PUCost4");
  if (blank(label)) then begin label = "Papild. kaštai 4";end;
  EditField(h2,v,70,label,Normal,Cost4,false,0);
  label = UserDefined("AccBlock","PUCost5");
  if (blank(label)) then begin label = "Papild. kaštai 5";end;
  EditField(h,v+=vs,70,label,Normal,Cost5,false,0);
    if (HasApprovals) then begin
      SoftEditField(h2,v,123,"Patvirtinimo statusas",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
    end;
  ButtonFrame(h3=400,v=16,130,2,"Papild. kaštų skaičiavimas");
  RadioButton(h3,v,0,0,"Vertė",ExtraCostsCalculation);
  RadioButton(h3,v+=16,1,0,"Svoris",ExtraCostsCalculation);
/*
//oldapprovals
    ButtonFrame(h3=-163,v=16,123,6,"Patvirtinimo būklė");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Nereikalaujamas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Nepradėtas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Nereikalautas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Aktyvus",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Patvirtintas",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Atmestas",AcceptanceStatus);
*/
    Tile(tilenr,130,false,tilenr,FreightCode); tilenr = tilenr + 1;
  EditField(h1,v=6,80,"Frachto įmonė",Normal,FreightCode,false,FreightCompanySClass);
  EditField(h1,v+=vs,-20,"Pavadinimas",Normal,FreightCompany,false,0);
  EditField(h1,v+=vs,-20,"Reg.Nr.",Normal,FreightCompanyRegNr,false,0);
  EditField(h1,v+=vs,-20,"Maš. inform.",Normal,TruckInfo,false,0);
  EditField(h1,v+=vs,-20,"Vairuotojas",Normal,Driver,false,0);
  EditField(h1,v+=vs,-20,"CMR",Normal,CMRText,false,0); // International transporting number
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1,v=6,-20,"Komentaras",Normal,Comment,false,0);
  end;
  if (StandardHansa==true) then begin
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1,v=6,-20,"Komentaras",Normal,Comment,false,0);
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Gavimo būklė",'r',4,"PUStatusDsm");
    SpecialMenu("Generuoti serijinius nr.",' ',2,"GenSerialNosPUDsm");
    if (HasIntegratedNL) then begin
      SpecialMenu("Atidaryti D/K operaciją",'t',4,"OpenTRFromPU");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModPL) then begin
      SpecialMenu("Sukurti Pirkimo faktūrą",'F',3,"VIFromPUDsm");
    end;
    if (HasRetGoodsToSupp and HasModIN) then begin
      SpecialMenu("Sukurti Prekių grąžinimą",'B',7,"RetPUFromPUDsm");
    end;
  end else begin
  if (IsEnterprise) then begin
  SpecialMenu("Prekės paieška",'f',1,"ItemSearchDsm");
  SpecialMenu("Gavimo būklė",'r',4,"PUStatusDsm");
  end;
  if (HasSerialNumbers) then begin
  	SpecialMenu("Sukurti serijinius nr.",' ',2,"GenSerialNosPUDsm");
  end;
  if (HasIntegratedNL) then begin
  SpecialMenu("Atidaryti D/K operaciją",'t',4,"OpenTRFromPU");
  end;
  if (HasTaxMatrix) then begin
  SpecialMenu("Atidaryti mok. matricą",' ',25,"OpenVatMatrixPUDsm");
  end;
  SpecialMenu("Spausdinti etiketes",'e',0,"PrintPULabPUDsm");
  SpecialMenu("Atnaujinti prekes",' ',1,"UpdatePricesPUDsm");

  if (HasModWHM) then begin
    SpecialMenu("Patvirtinti sandėlio vald. perkėlimus",' ',9,"OKStockMovPUrDsm");
  end;
  if (HasLocalization("HRV")) then begin
    SpecialMenu("Sales Price Calculation",' ',8,"SPCHRVPUDsm");
  end;
  if (HasApprovals) then begin
    SpecialMenu("Patvirtinimo užklausa",' ',6,"PUSendforAcceptancePUDsm");
    SpecialMenu("Atšaukti patvirtinimo užklausą",' ',2,"CancelApprovalRequestDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModPL) then begin
  SpecialMenu("Sukurti pirkimo faktūrą",'F',3,"VIFromPUDsm");
  end;
  if (HasQualityControl) then begin
  SpecialMenu("Kokybės kontrolė",'u',10,"QualConFromPUDsm");
//SpecialMenu("Update Mark",' ',6,"UpdateMarkPUDsm");
  end;
  if (HasAdvancedStock or (HasRetGoodsToSupp and HasModIN)) then begin
  SpecialMenu("Sukurti prekių grąžinimą",'B',7,"RetPUFromPUDsm");
  end;
  if (HasModRent) then begin
//SpecialMenu("Sukurti sandėlio perkėlimą",' ',5,"StockMovFromPUSpec");
//SpecialMenu("Scan",' ',8,"ScanBarCodePUDsm");
  SpecialMenu("Sukurti sandėlio perdavimą",' ',8,"INTransFromPUsm");
  end;
  SpecialMenu("Pridėti tiekėją",' ',0,"AddSupplierPUDsm");
  SpecialMenu("Pridėti prekę",' ',0,"AddItemPUDsm");
  end;
  EndWindow;
end;

window INRClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,v,v1,vm,vs,v2;
  Integer tilenr;

  WindowBegin("Prekių likučiai",INRClass,CGRcW,RcType);
  h = 160; v = 6; vs = 20; h2 = 30; h3 = 180; h4 = 330;

  if (IsEnterprise) then begin
    SetWRect(20,80,580,470);
    Tile(0,40,false,"",f1);
    h4 = 330;
  end else begin
    SetWRect(20,80,400,470);
    h4 = 227;
    h = 120;
  end;

  EditFieldTL(h,v,150,"Prekė",M4UStr,Normal,50,f1,false,INSClass); v = v + vs;
  if (IsEnterprise) then begin
    TileButtons(v,2);
    tilenr = 1;
    Tile(tilenr,340,false,tilenr,d1); tilenr = tilenr + 1;
    v = 6;
  end;
  if (HasItemGroups) then begin
    EditFieldTL(h,v,150,"Grupė",M4UStr,Normal,11,f3,false,ITSClass); v = v + vs;
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v,150,"Prekės klasė", M4UStr,Normal,100,f4,false,DISClass); v = v + vs;
    EditFieldTL(h,v,150,"Klasių tipas",M4UStr,Normal,60,f5,false,CTypeSClass); v = v + vs;
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v,80,"Patalpa",M4Code,Normal,10,f2,false,LocationSClass); v = v + vs;
  end;
    //  EditFieldTL(h,v+=vs,80,"Location Group",M4Code,Normal,10,f6,false,LocGrSClass);
//  EditFieldTL(h,v+=vs,150,"Location Classification",M4List,Normal,200,f7,false,LocClSClass);
  if (HasPositions) then begin
    EditFieldTL(h,v,150,"Pozicija",M4Code,Normal,10,FirstAcc,false,PosSClass); v = v + vs;
  end;
  if (HasDepartments) then begin
    EditFieldTL(h,v,150,"Skyrius",M4UStr,Normal,10,AccStr,false,DepSClass); v = v + vs;
  end;
  if (HasModPO) then begin
    EditFieldTL(h,v,150,"Tiekėjas",M4UStr,Normal,20,LastAcc,false,VESClass); v = v + vs;
  end;
  if (HasCategories) then begin
    EditFieldTL(h,v,50,"Tiekėjo kategorija",M4UStr,Normal,5,f9,false,VGSClass); v = v + vs;
  end;
  if (HasContactClassification) then begin
    EditFieldTL(h,v,150,"Pirkėjo klasė",M4UStr,Normal,30,f8,false,CClassSClass); v = v + vs;
  end;
  EditFieldTL(h,v,80,"Data",M4Date,Normal,0,d1,false,PasteCurDate); v = v + vs;
  EditFieldTL(h,v+=vs,150,"Muitinės kodas",M4UStr,Normal,60,f12,false,CommoditySClass); //EBS-CUST
  ButtonFrame(h2,vm=(v+=30),123,5,"Turtas");
    RadioButton(h2,v,0,0,"Peržiūra",ArtMode);
    RadioButton(h2,v+=16,1,0,"Detaliai",ArtMode);
  if (HasMultiLocations) then begin
    RadioButton(h2,v+=16,2,0,"Patalpos",ArtMode);
  CheckBox(h2+30,v+=16,0,"Įtr. sumas",flags[14]);
  RadioButton(h2,v+=16,3,0,"Viso patalpai",ArtMode);
  end;
  EndFrame;
  if (HasMultiCurrency) then begin
    v = v + 45; v1 = v;
  end;
/*not implemented ?
  if (HasMultiCurrency) then begin
    ButtonFrame(h2,v1=(v+=45),123,2,"Exchange Rate");
    RadioButton(h2,v,0,0,"At Goods Receipt",flags[1]);
    RadioButton(h2,v+=16,1,0,"Current",flags[1]);
  end;
*/
  if (IsEnterprise) then begin
  ButtonFrame(h3,v=vm,123,5,"Įvertinimo metodas");
  RadioButton(h3,v,0,0,"Nustatytas",flags[11]);
  RadioButton(h3,v+=16,1,0,"Savikaina",flags[11]);
  RadioButton(h3,v+=16,2,0,"% nuo pardavimo kainos",flags[11]);
  RadioButton(h3,v+=16,3,0,"Svertinis vidurkis",flags[11]);
  RadioButton(h3,v+=16,4,0,"Eilės",flags[11]);
  ButtonFrame(h3,v=v1,123,3,"Rodyti");
  RadioButton(h3,v,0,0,"Paprastai",flags[19]);
  RadioButton(h3,v+=16,1,0,"Apibendrintai",flags[19]);
  RadioButton(h3,v+=16,2,0,"Neapibendrintai",flags[19]);
  end;
  ButtonFrame(h4,v=vm,123,5,"Rūšiavimas");
  RadioButton(h4,v,0,0,"Nr.",flags[2]);
  if (HasItemGroups) then begin
  RadioButton(h4,v+=16,1,0,"Grupė",flags[2]);
  end;
  RadioButton(h4,v+=16,2,0,"Pavadinimas",flags[2]);
  if (IsEnterprise) then begin
  RadioButton(h4,v+=16,3,0,"Barkodas",flags[2]);
    if (StandardHansa==false) then begin
  RadioButton(h4,v+=16,4,0,"Klasė",flags[2]);
    end;
  end;
  EndFrame;
  v2 = v + 16;
  v = v1;
  if (IsEnterprise) then begin
  CheckBox(h4,v=20,0,"Tik su likučiais",UsedOnly);
  CheckBox(h4,v+=16,0,"Tik neigiami kiekiai",flags[17]);
  end;
  if (IsEnterprise==false) then begin
    v = v2;
  end;
  if (HasSerialNumbers) then begin
    CheckBox(h4,v+=16,0,"Rodyti serijinį  Nr.",flags[10]); v = v + 16;
  end;
  if (HasSecondQuantity) then begin
    CheckBox(h4,v,0,"Rodyti kiekį 2",flags[15]); v = v + 16;
  end;
  if (IsEnterprise) then begin
    CheckBox(h4,v,0,"Vertės - 2 sk. po kabl.",flags[16]); v = v + 16; // Who wanted this? Decimals per report....nahh.., I haven't added this one, JJ
    CheckBox(h4,v,0,"Įtraukti Uždarytas prekes",flags[18]); v = v + 16;
    CheckBox(h4,v,0,"Ataskaita skaičiuota svert. vid. atbul. data",flags[20]); v = v + 16;
    if (StandardHansa==false) then begin
      CheckBox(h4,v,0,"Rodyti su supersesijomis",flags[21]); v = v + 16;
    end;
end;
  if (IsEnterprise) then begin
    Tile(tilenr,340,false,tilenr,-); tilenr = tilenr + 1;
    v = 6;
    EditFieldTL(h,v,150,"Vietos grupė",M4Code,Normal,10,f10,false,LocGrSClass);
    EditFieldTL(h,v+=vs,150,"Vietos klasifikavimas",M4List,Normal,200,f11,false,LocClSClass);
    ButtonFrame(h=30,vm=(v+=40),188,3,"Turtas");
    RadioButton(h,v,0,0,"Įtraukti konsignacines prekes",flags[12]);
    RadioButton(h,v+=16,1,0,"Neįtraukti konsignacinių prekių",flags[12]);
    RadioButton(h,v+=16,2,0,"Tik konsignacinės prekės",flags[12]);
  end else begin
    vm = v;
  end;
  if (HasVarieties) then begin
    CheckBox(h4,v=vm,0,"Rodyti įvairoves",flags[22]); v = v + 16;
  end;
  CheckBox(h4,v,0,"Rodyti muitinės kodus",flags[26]); v = v + 16; //EBS-CUST
  if (HasLocalization("ARG,MEX,USA") and IsStandardProduct==false) then begin
    CheckBox(h4,v,0,"Show Dispatch Number (Detailed)",flags[23]); v = v + 16;
  end;
  EndWindow;
end;

window HazLevDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Rizikos lygis",HazLevDClass,CGview,-);
  SetWRect(74,80,500,150);
  UseView(HazLevVc);
  EditField(h=120,v=6, 100,"Kodas",Normal,Code,false,0);
  EditField(h,v+=20,-40,"Komentaras",Normal,Comment,false,0);
  EditField(h,v+=20,80,"Svorio koef.",Normal,WeightCoefficient,true,0);
  //EBS-->
  MatrixBegin(4,v+=40,-32,-40,-,99);
  MatCol(1,24,"Kalba",0,LangCode,false,LangSClass);
  MatCol(1,94,"Tekstas",0,Text,false,0);
  EndMatrix;
  //EBS<--
  EndWindow;
end;

window INrsRClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,v,vm,vs;
  WindowBegin("Prekės istorija",INrsRClass,CGRcW,RcType);
  SetWRect(20,80,550,460);
  v = 6; vs = 20; h = 160; h2 = 30; h3 = 180; h4 = 340;
  PeriodField(h,v,"Periodas");
  EditFieldTL(h,v+=vs,150,"Prekė",M4UStr,Normal,50,f1,false,INSClass);
  if (HasItemGroups) then begin
  EditFieldTL(h,v+=vs,150,"Grupė",M4UStr,Normal,5,f3,false,ITSClass);
  end;
  if (HasItemClassification) then begin
  EditFieldTL(h,v+=vs,150,"Prekės klasė", M4UStr,Normal,60,f4,false,DISClass);
  EditFieldTL(h,v+=vs,150,"Klasių tipas",M4UStr,Normal,60,f5,false,CTypeSClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=vs,150,"Patalpa",M4Code,Normal,21,f6,false,LocationSClass);
    if (StandardHansa==false and IsEnterprise) then begin
      EditFieldTL(h,v+=vs,150,"Patalpos grupė",M4Code,Normal,10,f7,false,LocGrSClass);
      EditFieldTL(h,v+=vs,150,"Patalpos klasė",M4List,Normal,200,f8,false,LocClSClass);
    end;
  end;
  if (HasDepartments) then begin
  EditFieldTL(h,v+=vs,150,"Skyrius",M4UStr,Normal,10,AccStr,false,DepSClass);
  end;
  if (HasModPO) then begin
  EditFieldTL(h,v+=vs,150,"Pagr. tiekėjas",M4UStr,Normal,10,f2,false,VESClass);
  end;
  EditFieldTL(h,v+=vs,150,"Muitinės kodas",M4UStr,Normal,60,f12,false,CommoditySClass); //EBS-CUST
  if (IsEnterprise) then begin
  CheckBox(h2,v+=26,0,"Tik sandėliuojamos prekės",flags[11]);
//  CheckBox(h2,v+=16,0,"Show Quantity 2",flags[12]);
  CheckBox(h2,v+=16,0,"Rodyti balansą prekėms be istorijos",flags[13]);
  CheckBox(h2,v+=16,0,"Įtraukti būsimus įrašus",flags[14]);
  end;
  if (HasMultiLocations) then begin
  CheckBox(h2,v+=16,0,"Pagal patalpą",flags[15]);
  end;
  if (HasSerialNumbers) then begin
  CheckBox(h2,v+=16,0,"Įtraukti ser. nr. informaciją",AccSpec);
  end;
  CheckBox(h2,v+=16,0,"Prekės su intr.",flags[29]); //EBS
  if (HasLocalization("ARG,MEX,USA") and IsStandardProduct==false) then begin
    CheckBox(h2,v+=16,0,"Include Dispatch Number",flags[22]);
  end;
//  CheckBox(h2,v+=16,0,"Include History Before Stocktake",flags[19]);
  ButtonFrame(h2,vm=(v+=38),130,3,"Funkcija"); //EBS edit
  RadioButton(h2,v,0,0,"Peržiūra",flags[9]);
  RadioButton(h2,v+=16,2,0,"Peržiūra su Intr.",flags[9]); //EBS
  RadioButton(h2,v+=16,1,0,"Detaliai",flags[9]);
  if (IsEnterprise) then begin
  ButtonFrame(h2,v+=56,130,2,"Rūšiavimas"); //EBS edit
  RadioButton(h2,v,0,0,"Savik. data",flags[10]);
  RadioButton(h2,v+=16,1,0,"Oper. data",flags[10]);
  end;
  ButtonFrame(h3,v=vm,140,3,"Funkcijos");
  RadioButton(h3,v,0,0,"Kiekiai",ArtMode);
  if (HasVarieties) then begin
  RadioButton(h3,v+=16,3,0,"Kiekiai ir įvairovės",ArtMode);
  end;
  RadioButton(h3,v+=16,1,0,"Sumos",ArtMode); // 2 Has some code for it, don't know what....
  EndFrame;
  if (HasSecondQuantity) then begin
  ButtonFrame(h4,v=vm,150,3,"Funkcija");//  CheckBox(20,v+=16,0,"Show Quantity 2",flags[12]);
  RadioButton(h4,v,0,0,"Nerodyti kiekio 2",flags[12]);
  RadioButton(h4,v+=16,1,0,"Rodyti kiekį 2",flags[12]);
  RadioButton(h4,v+=16,2,0,"Rodyti koeficientą",flags[12]);
    ButtonFrame(h4,v=30,160,12,"Registrai");
  end else begin
    ButtonFrame(h4,v=vm,160,12,"Registrai");
  end;
  if (HasModSO) then begin
    CheckBox(h4,v,0,"Siuntimai",flags[2]); v = v + 16;
  end;
  CheckBox(h4,v,0,"Gavimai",flags[3]); v = v + 16;
  CheckBox(h4,v,0,"Faktūros",flags[1]); v = v + 16;
//  CheckBox(h4,v,0,"POS Invoices",flags[16]); v = v + 16;
  if (HasModProd) then begin
    if (StandardHansa==false) then begin
      CheckBox(h4,v,0,"Gamybos užsakymai",flags[18]); v = v + 16;
    end;
    CheckBox(h4,v,0,"Gaminiai",flags[5]); v = v + 16;
    if (StandardHansa==false) then begin
      CheckBox(h4,v,0,"Gamybos operacijos",flags[20]); v = v + 16;
    end;
  end;
  if (HasAdvancedStock) then begin
    CheckBox(h4,v,0,"Grąžintos prekės",flags[8]); v = v + 16;
    CheckBox(h4,v,0,"Grąž. prekės iš tiek.",flags[19]); v = v + 16;
  end;
  CheckBox(h4,v,0,"Nurašymai",flags[6]); v = v + 16;
  if (IsEnterprise or (HasLocalization("PRT") and HasMultiLocations)) then begin
    CheckBox(h4,v,0,"#Stock# Movements",flags[4]); v = v + 16;
  end;
  if (HasAdvancedStock) then begin
    CheckBox(h4,v,0,"Perkainavimai",flags[22]); v = v + 16;
  end;
  if (HasModRent) then begin
    CheckBox(h4,v,0,"Iškėlimai",flags[17]); v = v + 16;
  end;
  if (HasModSVO) then begin
    CheckBox(h4,v,0,"Darbo kortelės",flags[7]); v = v + 16;
  end;
  EndFrame;
  EndWindow;
end;

window LitIntrastatIVEClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Intrastatas Pard. kn. (Lietuva)",LitIntrastatIVEClass,CGEcW,RcType);
  SetWRect(64,80,500,300);
  vs = 20; h = 250; v = 6;
  PeriodField(h,v,"Periodas");
   EditFieldTL(h,v+=vs,70,"Voko Nr.", M4UStr,Normal,41,f1,false,0); //EBS
 //EditFieldTL(h,v+=vs,70,"Pirkėjas", M4UStr,Normal,41,f2,false,CUSClass);
  EditFieldTL(h,v+=vs,20,"Versija(Pirminė:O; Nulinė:N; Tikslinančioji:M)", M4UStr,Normal,2,f3,false,0);
  EditFieldTL(h,v+=vs,70,"Intrastat nr.", M4UStr,Normal,16,f4,false,0);
  EditFieldTL(h,v+=vs,70,"Intrastat data",M4Date,Normal,0,d1,false,PasteCurDate);
  EditFieldTL(h,v+=vs,-20,"Kont. asmuo", M4UStr,Normal,60,f5,false,UserSClass); //EBS edit CUSClass -> UserSClass
  EditFieldTL(h,v+=vs,120,"Tarpininkas", M4UStr,Normal,20,f6,false,CUSClass);
  EndWindow;
end;
